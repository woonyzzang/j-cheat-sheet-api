{
    "__PAGE__": "HTML4.01",
    "Basic Tags": {
        "Basic": {
            "<!DOCTYPE>": "Defines the document type",
            "<html>": "Defines an HTML document",
            "<body>": "Defines the document's body",
            "<h1> ~ <h6>": "Defines HTML headings",
            "<p>": "Defines a paragraph",
            "<br>": "Inserts a single line break",
            "<hr>": "Defines a horizontal line"
        },
        "Images": {
            "<img>": "Defines an image",
            "<map>": "Defines an image-map",
            "<area>": "Defines an area inside an image-map"
        },
        "Links": {
            "<a>": "Defines an anchor",
            "<link>": "Defines the relationship between a document and an external resource"
        },
        "Lists": {
            "<ul>": "defines an unordered list",
            "<ol>": "defines an ordered list",
            "<li>": "defines a list item",
            "<dl>": "defines a definition list",
            "<dt>": "defines an item in a definition list",
            "<dd>": "defines a description of an item in a definition list"
        }
    },

    "Formatting": {
        "Format": {
            "<acronym>": "Defines an acronym",
            "<abbr>": "Defines an abbreviation",
            "<address>": "Defines contact information for the author/owner of a document",
            "<b>": "Defines bold text",
            "<bdo>": "Overrides the current text direction",
            "<big>": "Defines big text",
            "<blockquote>": "Defines a long quotation",
            "<cite>": "Defines a citation",
            "<code>": "Defines a piece of computer code",
            "<del>": "Defines text that has been deleted from a document",
            "<dfn>": "Defines a definition term",
            "<em>": "Defines emphasized text",
            "<i>": "Defines italic text",
            "<ins>": "Defines text that has been inserted into a document",
            "<kbd>": "Defines keyboard input",
            "<pre>": "Defines preformatted text",
            "<q>": "Defines a short quotation",
            "<samp>": "Defines sample output from a computer program",
            "<small>": "Defines smaller text",
            "<strong>": "Defines strong text",
            "<sub>": "Defines subscripted text",
            "<sup>": "Defines superscripted text",
            "<tt>": "Defines teletype text",
            "<var>": "Defines a variable"
        }
    },

    "Form/Table": {
        "Forms": {
            "<form>": "defines an html form for user input",
            "<input>": "defines an input control",
            "<textarea>": "defines a multiline input control (text area)",
            "<button>": "defines a clickable button",
            "<select>": "defines a drop-down list",
            "<optgroup>": "defines a group of related options in a drop-down list",
            "<option>": "defines an option in a drop-down list",
            "<label>": "defines a label for an <input> element",
            "<fieldset>": "groups related elements in a form",
            "<legend>": "defines a caption for a <fieldset> element"
        },
        "Tables": {
            "<table>": "defines a table",
            "<caption>": "defines a table caption",
            "<th>": "defines a header cell in a table",
            "<tr>": "defines a row in a table",
            "<td>": "defines a cell in a table",
            "<thead>": "groups the header content in a table",
            "<tbody>": "groups the body content in a table",
            "<tfoot>": "groups the footer content in a table",
            "<col>": "defines attribute values for one or more columns in a table",
            "<colgroup>": "defines a group of columns in a table for formatting"
        },
        "Frames": {
            "<frame>": "Defines a window (a frame) in a frameset",
            "<frameset>": "Defines a set of frames",
            "<noframes>": "Defines an alternate content for users that do not support frames",
            "<iframe>": "Defines an inline frame"
        }
    },

    "Attributes": {
        "Core": {
            "class": "pecifies one or more classnames for an element (refers to a class in a style sheet)",
            "id": "pecifies a unique id for an element",
            "style": "pecifies an inline CSS style for an element",
            "title": "pecifies extra information about an element"
        },
        "Language": {
            "dir": "pecifies the text direction for the content in an element",
            "lang": "pecifies the language of the element's content"
        },
        "Keyboard": {
            "accesskey": "Specifies a shortcut key to activate/focus an element",
            "tabindex": "Specifies the tabbing order of an element"
        }
    },

    "Others": {
        "Styles": {
            "<style>": "defines style information for a document",
            "<div>": "defines a block section in a document",
            "<span>": "defines a inline section in a document"
        },
        "Meta Info": {
            "<head>": "defines information about the document",
            "<title>": "defines the document title",
            "<meta>": "defines metadata about an html document",
            "<base>": "specifies the base url/target for all relative urls in a document"
        },
        "Programming": {
            "<script>": "defines a client-side script",
            "<noscript>": "defines an alternate content for users that do not support lient-side scripts",
            "<object>": "defines an embedded object",
            "<param>": "defines a parameter for an object"
        }
    },

    "__PAGE__": "HTML5",
    "Global Attributes": {
        "Core": {
            "data-*": "custom data attributes an element",
            "title": "pecifies extra information about an element",
            "contenteditable": "the browser modifies its widget to allow editing",
            "draggable": "An enumerated attribute indicating whether the element can be dragged",
            "hidden": "A Boolean attribute indicates that the element is not yet",
            "inputmode": "Provides a hint to browsers as to the type of virtual keyboard configuration to use when editing this element or its contents",
            "is": "Allows you to specify that a standard HTML element should behave like a registered custom built-in element",
            "itemid": "The unique, global identifier of an item",
            "itemprop": "Used to add properties to an item. Every HTML element may have an \"itemprop\" attribute specified",
            "itemref": "Properties that are not descendants of an element with the \"itemscope\" attribute can be associated with the item using an \"itemref\"",
            "itemscope": "\"itemscope\" (usually) works along with \"itemtype\" to specify that the HTML contained in a block is about a particular item",
            "itemtype": "Specifies the URL of the vocabulary that will be used to define \"itemprops\" (item properties) in the data structure",
            "slot": "Assigns a slot in a shadow DOM shadow tree to an element",
            "spellcheck": "An enumerated attribute defines whether the element may be checked for spelling errors",
            "translate": "An enumerated attribute that is used to specify whether an element's attribute values and the values of its \"Text\" node children are to be translated when the page is localized, or whether to leave them unchanged",
            "id": "pecifies a unique id for an element",
            "class": "pecifies one or more classnames for an element (refers to a class in a style sheet)",
            "style": "pecifies an inline CSS style for an element"
        },
        "Language": {
            "lang": "pecifies the language of the element's content"
        },
        "Keyboard": {
            "accesskey": "Specifies a shortcut key to activate/focus an element",
            "tabindex": "Specifies the tabbing order of an element"
        }
    },

    "Main": {
        "Document": {
            "<!DOCTYPE>": "Defines the document type"
        },
        "Root": {
            "<html>": "Defines an HTML document"
        }
    },

    "Metadata": {
        "Meta Info": {
            "<head>": "defines information about the document",
            "<meta>": "defines metadata about an html document",
            "<title>": "defines the document title",
            "<base>": "specifies the base url/target for all relative urls in a document",
            "<link>": "Defines the relationship between a document and an external resource",
            "<style>": "defines style information for a document"
        }
    },

    "Scripting": {
        "Programming": {
            "<canvas>": "defines the to draw graphics and animations a document",
            "<noscript>": "defines an alternate content for users that do not support lient-side scripts",
            "<script>": "defines a client-side script"
        }
    },

    "Sectioning": {
        "Root": {
            "<body>": "Defines the document's body"
        },
        "Section": {
            "<header>": "Defines a header",
            "<hgroup>": "Defines a headings group",
            "<h1> ~ <h6>": "Defines a headings",
            "<nav>": "Defines a navigation",
            "<main>": "Defines a main",
            "<article>": "Defines a article",
            "<section>": "Defines a section",
            "<aside>": "Defines a aside",
            "<footer>": "Defines a footer",
            "<address>": "Defines a address"
        }
    },

    "Content Grouping": {
        "Text Content": {
            "<blockquote>": "Defines a long quotation",
            "<div>": "defines a section in a document",
            "<dl>": "defines a definition list",
            "<dt>": "defines an item in a definition list",
            "<dd>": "defines a description of an item in a definition list",
            "<figure>": "defines a illustrations, diagrams, photographs, and code listings",
            "<figcaption>": "defines a figure caption or legend describing",
            "<hr>": "Defines a horizontal line",
            "<ol>": "defines an ordered list",
            "<ul>": "defines an unordered list",
            "<li>": "defines a list item",
            "<p>": "Defines a paragraph",
            "<pre>": "Defines preformatted text"
        }
    },

    "Text Semantics": {
        "Inline Level": {
            "<a>": "Defines an anchor",
            "<abbr>": "Defines an abbreviation",
            "<b>": "Defines bold text",
            "<bdi>": "Definition of key objects and boundaries in definition",
            "<bdo>": "Redefine the current direction of text",
            "<br>": "Inserts a single line break",
            "<cite>": "Defines a citation",
            "<code>": "Defines a piece of computer code",
            "<data>": "Definitions a machine translation translation given the contents",
            "<dfn>": "Defines a definition term",
            "<em>": "Defines emphasized text",
            "<i>": "Defines italic text or Includes jargon, foreign language or fictional character thought",
            "<kbd>": "Defines keyboard input",
            "<mark>": "Definition of the relevance or importance, reference or notation of the indicated path in the context of the presentation or highlighting",
            "<q>": "Defines a short quotation",
            "<rb>": "Defined text with annotated Ruby",
            "<rp>": "Defined text with annotated Ruby",
            "<rt>": "Defining Browser Parentheses that Do Not Support Ruby's Annotation",
            "<rtc>": "Definition of the semantic annotation of a ruby display character",
            "<ruby>": "Defines ruby annotation",
            "<samp>": "Defines sample output from a computer program",
            "<small>": "Defines smaller text",
            "<span>": "defines a section in a document",
            "<strong>": "Defines a meaningful emphasis strong text",
            "<sub>": "Defines subscripted text",
            "<sup>": "Defines superscripted text",
            "<time>": "Defines Specific Periods",
            "<var>": "Defines a variable",
            "<wbr>": "Defines a specifies where in a text it would be ok to add a line-break"
        }
    },

    "Image/Multimedia": {
        "Image": {
            "<img>": "Defines an image",
            "<map>": "Defines an image-map",
            "<area>": "Defines an area inside an image-map"
        },
        "Multimedia": {
            "<audio>": "defines a contain the sound content of the document",
            "<track>": "Define timed text tracks (or time-based data), such as automatically handling subtitles",
            "<video>": "Defines a video playback media player in a document"
        }
    },

    "Edits": {
        "Demarcating": {
            "<del>": "Defines text that has been deleted from a document",
            "<ins>": "Defines text that has been inserted into a document"
        }
    },

    "Tables": {
        "Table": {
            "<table>": "defines a table",
            "<caption>": "defines a table caption",
            "<colgroup>": "defines a group of columns in a table for formatting",
            "<col>": "defines attribute values for one or more columns in a table",
            "<thead>": "groups the header content in a table",
            "<tbody>": "groups the body content in a table",
            "<tfoot>": "groups the footer content in a table",
            "<tr>": "defines a row in a table",
            "<th>": "defines a header cell in a table",
            "<td>": "defines a cell in a table"
        }
    },

    "Forms": {
        "Control": {
            "<form>": "defines an html form for user input",
            "<fieldset>": "groups related elements in a form",
            "<legend>": "defines a caption for a <fieldset> element",
            "<label>": "defines a label for an <input> element",
            "<input>": "defines an input control",
            "<datalist>": "defines a options set",
            "<select>": "defines a drop-down list",
            "<optgroup>": "defines a group of related options in a drop-down list",
            "<option>": "defines an option in a drop-down list",
            "<textarea>": "defines a multiline input control (text area)",
            "<button>": "defines a clickable button",
            "<meter>": "Defines a scale",
            "<output>": "Defines a calculation result",
            "<progress>": "Defines a progress of the task"
        }
    },

    "Embedded": {
        "Embed": {
            "<embed>": "defines an embedded applet",
            "<iframe>": "Defines an inline frame",
            "<object>": "defines an embedded object",
            "<param>": "defines a parameter for an object",
            "<picture>": "defines a picture",
            "<source>": "defines a source for an picture"
        }
    },

    "Interactive": {
        "Widget": {
            "<details>": "drop closer widget",
            "<dialog>": "Define dialogs or other interactive elements such as a ligature window",
            "<menu>": "a group of commands that can be activated",
            "<summary>": "drop closer widget summary"
        }
    },

    "Web Components": {
        "<slot>": "Create and reuse separate DOM trees",
        "<template>": "The component's skeleton is deactivated until it is used"
    },

    "__PAGE__": "CSS3",
    "Box Model": {
        "Margin": {
            "margin": "Sets all the margin properties in one declaration",
            "margin-bottom": "Sets the bottom margin of an element",
            "margin-left": "Sets the left margin of an element",
            "margin-right": "Sets the right margin of an element",
            "margin-top": "Sets the top margin of an element"
        },
        "Padding": {
            "padding": "Sets all the padding properties in one declaration",
            "padding-bottom": "Sets the bottom padding of an element",
            "padding-left": "Sets the left padding of an element",
            "padding-right": "Sets the right padding of an element",
            "padding-top": "Sets the top padding of an element"
        },
        "Dimension": {
            "width": "Sets the height of an element",
            "height": "Sets the width of an element",
            "max-height": "Sets the maximum height of an element",
            "max-width": "Sets the maximum width of an element",
            "min-height": "Sets the minimum height of an element",
            "min-width": "Sets the minimum width of an element"
        },
        "Border and Outline": {
            "border": "Sets all the border properties in one declaration",
            "border-bottom": "Sets all the bottom border properties in one declaration",
            "border-bottom-color": "Sets the color of the bottom border",
            "border-bottom-style": "Sets the style of the bottom border",
            "border-bottom-width": "Sets the width of the bottom border",
            "border-color": "Sets the color of the four borders",
            "border-left": "Sets all the left border properties in one declaration",
            "border-left-color": "Sets the color of the left border",
            "border-left-style": "Sets the style of the left border",
            "border-left-width": "Sets the width of the left border",
            "border-right": "Sets all the right border properties in one declaration",
            "border-right-color": "Sets the color of the right border",
            "border-right-style": "Sets the style of the right border",
            "border-right-width": "Sets the width of the right border",
            "border-style": "Sets the style of the four borders",
            "border-top": "Sets all the top border properties in one declaration",
            "border-top-color": "Sets the color of the top border",
            "border-top-style": "Sets the style of the top border",
            "border-top-width": "Sets the width of the top border",
            "border-width": "Sets the width of the four borders",
            "outline": "Sets all the outline properties in one declaration",
            "outline-color": "Sets the color of an outline",
            "outline-style": "Sets the style of an outline",
            "outline-width": "Sets the width of an outline",
            "border-bottom-left-radius": "Defines the shape of the border of the bottom-left corner",
            "border-bottom-right-radius": "Defines the shape of the border of the bottom-right corner",
            "border-image": "A shorthand property for setting all the border-image-* properties",
            "border-image-outset": "Specifies the amount by which the border image area extends beyond the border box",
            "border-image-repeat": "Specifies whether the image-border should be repeated, rounded or stretched",
            "border-image-slice": "Specifies the inward offsets of the image-border",
            "border-image-source": "Specifies an image to be used as a border",
            "border-image-width": "Specifies the widths of the image-border",
            "border-radius": "A shorthand property for setting all the four border-*-radius properties",
            "border-top-left-radius": "Defines the shape of the border of the top-left corner",
            "border-top-right-radius": "Defines the shape of the border of the top-right corner",
            "box-decoration-break": "Defines the shape of the border of the top-right corner",
            "box-shadow": "Attaches one or more drop-shadows to the box"
        }
    },

    "Selectors": {
        "Basic Selectors": {
            ".class": "Selects all elements with class=\"intro\"",
            "#id": "Selects the element with id=\"firstname\"",
            "*": "Selects all elements",
            "element": "Selects all <p> elements",
            "element, element": "Selects all <div> elements and all <p> elements",
            "element element": "Selects all <p> elements inside <div> elements",
            "element > element": "Selects all <p> elements where the parent is a <div> element",
            "element + element": "Selects all <p> elements that are placed immediately after <div> elements",
            "[attribute]": "Selects all elements with a target attribute",
            "[attribute=value]": "Selects all elements target=\"_blank\"",
            "[attribute~=value]": "Selects all elements with a title attribute containing the word \"flower\"",
            "[attribute|=value]": "Selects all elements with a lang attribute value starting with \"en\"",
            "element1 ~ element2": "Selects every <ul> element that are preceded by a <p> element",
            "[attribute^=value]": "Selects every <a> element whose src attribute value begins with \"https\"",
            "[attribute$=value]": "Selects every <a> element whose src attribute value ends with \".pdf\"",
            "[attribute*=value]": "Selects every <a> element whose src attribute value contains the substring \"w3schools\""
        },
        "Pseudo-Selectors": {
            ":link": "Selects all unvisited links",
            ":visited": "Selects all visited links",
            ":active": "Selects the active link",
            ":hover": "Selects links on mouse over",
            ":focus": "Selects the input element which has focus",
            ":first-letter": "Selects the first letter of every <p> element",
            ":first-line": "Selects the first line of every <p> element",
            ":first-child": "Selects every <p> element that is the first child of its parent",
            ":before": "Insert content before&nbsp; the content of every <p> element",
            ":after": "Insert content after every <p> element",
            ":lang(language)": "Selects every <p> element with a lang attribute value starting with \"it\"",
            ":first-of-type": "Selects every <p> element that is the first <p> element of its parent",
            ":last-of-type": "Selects every <p> element that is the last <p> element of its parent",
            ":only-of-type": "Selects every <p> element that is the only <p> element of its parent",
            ":only-child": "Selects every <p> element that is the only child of its parent",
            ":nth-child(n)": "Selects every <p> element that is the second child of its parent",
            ":nth-last-child(n)": "Selects every <p> element that is the second child of its parent, counting from the last child",
            ":nth-of-type(n)": "Selects every <p> element that is the second <p> element of its parent",
            ":last-child": "Selects every <p> element that is the last child of its parent",
            ":not": "Selects elements that is not represented by the argument",
            ":root": "Selects the document’s root element",
            ":empty": "Selects every <p> element that has no children (including text nodes)",
            ":target": "Selects the current active #news element (clicked on a URL containing that anchor name)",
            ":enabled": "Selects every enabled <input> element",
            ":disabled": "Selects every disabled <input> element",
            ":checked": "Selects every checked <input> element",
            "::selection": "Selects the portion of an element that is selected by a user"
        }
    },

    "Style": {
        "Background": {
            "background": "Sets all the background properties in one declaration",
            "background-attachment": "Sets whether a background image is fixed or scrolls with the rest of the page",
            "background-color": "Sets the background color of an element",
            "background-image": "Sets the background image for an element",
            "background-position": "Sets the starting position of a background image",
            "background-repeat": "Sets how a background image will be repeated",
            "background-clip": "Specifies the painting area of the background",
            "background-origin": "Specifies the positioning area of the background images",
            "background-size": "Specifies the size of the background images"
        },
        "Color": {
            "opacity": "Sets the opacity level for an element"
        },
        "Font": {
            "font": "Sets all the font properties in one declaration",
            "font-family": "Specifies the font family for text",
            "font-size": "Specifies the font size of text",
            "font-style": "Specifies the font style for text",
            "font-variant": "Specifies whether or not a text should be displayed in a small-caps font",
            "font-weight": "Specifies the weight of a font",
            "@font-face": "A rule that allows websites to download and use fonts other than the \"web-safe\" fonts",
            "font-size-adjust": "Preserves the readability of text when font fallback occurs",
            "font-stretch": "Selects a normal, condensed, or expanded face from a font family"
        },
        "Positioning": {
            "bottom": "Specifies the bottom position of a positioned element",
            "clear": "Specifies which sides of an element where other floating elements are not allowed",
            "clip": "Clips an absolutely positioned element",
            "cursor": "Specifies the type of cursor to be displayed",
            "display": "Specifies how a certain HTML element should be displayed",
            "float": "Specifies whether or not a box should float",
            "left": "Specifies the left position of a positioned element",
            "overflow": "Specifies what happens if content overflows an element's box",
            "position": "Specifies the type of positioning method used for an element (static,relative, absolute or fixed)",
            "right": "Specifies the right position of a positioned element",
            "top": "Specifies the top position of a positioned element",
            "visibility": "Specifies whether or not an element is visible",
            "z-index": "Sets the stack order of a positioned element"
        }
    },

    "Elements": {
        "Hyperlink": {
            "target": "A shorthand property for setting the target-name, target-new, and target-position properties",
            "target-name": "Specifies where to open links (target destination)",
            "target-new": "Specifies whether new destination links should open in a new window or in a new tab of an existing window",
            "target-position": "Specifies where new destination links should be placed"
        },
        "Text": {
            "color": "Sets the color of text",
            "direction": "Specifies the text direction/writing direction",
            "letter-spacing": "Increases or decreases the space between characters in a text",
            "line-height": "Sets the line height",
            "text-align": "Specifies the horizontal alignment of text",
            "text-decoration": "Specifies the decoration added to text",
            "text-indent": "Specifies the indentation of the first line in a text-block",
            "text-transform": "Controls the capitalization of text",
            "unicode-bidi": "determines how bidirectional text in a document is handled",
            "vertical-align": "Sets the vertical alignment of an element",
            "white-space": "Specifies how white-space inside an element is handled",
            "word-spacing": "Increases or decreases the space between words in a text",
            "text-overflow": "Specifies what should happen when text overflows the containing element",
            "text-shadow": "Adds shadow to text",
            "text-wrap": "Specifies line breaking rules for text",
            "word-break": "Specifies line breaking rules for non-CJK scripts",
            "word-wrap": "Allows long, unbreakable words to be broken and wrap to the next line"
        },
        "List": {
            "list-style": "Sets all the properties for a list in one declaration",
            "list-style-image": "Specifies an image as the list-item marker",
            "list-style-position": "Specifies if the list-item markers should appear inside or outside the content flow",
            "list-style-type": "Specifies the type of list-item marker"
        },
        "Table": {
            "border-collapse": "Specifies whether or not table borders should be collapsed",
            "border-spacing": "Specifies the distance between the borders of adjacent cells",
            "caption-side": "Specifies the placement of a table caption",
            "empty-cells": "Specifies whether or not to display borders and background on empty cells in a table",
            "table-layout": "Sets the layout algorithm to be used for a table"
        }
    },

    "CSS3 Box": {
        "Box": {
            "overflow-x": "Specifies whether or not to clip the left/right edges of the content, if it overflows the element's content area",
            "overflow-y": "Specifies whether or not to clip the top/bottom edges of the content, if it overflows the element's content area",
            "overflow-style": "Specifies the preferred scrolling method for elements that overflow",
            "rotation": "Rotates an element around a given point defined by the rotation-point property"
        },
        "Flexible Box": {
            "flex": "sets how a flex item will grow or shrink to fit the space available in its flex container",
            "flex-basis": "sets the initial main size of a flex item",
            "flex-direction": "sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed)",
            "flex-flow": "flex-direction and flex-wrap properties.",
            "flex-grow": "sets the flex grow factor of a flex item main size",
            "flex-shrink": "sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container",
            "flex-wrap": "sets whether flex items are forced onto one line or can wrap onto multiple lines",
            "order": "sets the order to lay out an item in a flex or grid container"
        },
        "Grid Layout": {
            "grid": "sets all of the explicit grid properties (grid-template-rows, grid-template-columns, and grid-template-areas), and all the implicit grid properties (grid-auto-rows, grid-auto-columns, and grid-auto-flow), in a single declaration",
            "grid-area": "grid-row-start, grid-column-start, grid-row-end and grid-column-end, specifying a grid item’s size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area",
            "grid-auto-columns": "specifies the size of an implicitly-created grid column track",
            "grid-auto-flow": "controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid",
            "grid-auto-rows": "specifies the size of an implicitly-created grid row track",
            "grid-column": "grid-column-start and grid-column-end specifying a grid item's size and location within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area",
            "grid-column-end": "specifies a grid item’s end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area",
            "grid-column-start": "specifies a grid item’s start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area",
            "grid-gap": "sets the gaps (gutters) between rows and columns. It is a shorthand for row-gap and column-gap",
            "grid-row": "shorthand property for grid-row-start and grid-row-end specifying a grid item’s size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area",
            "grid-row-end": "specifies a grid item’s end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area",
            "grid-row-start": "specifies a grid item’s start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area",
            "grid-template": "shorthand property for defining grid columns, rows, and areas",
            "grid-template-areas": "specifies named grid areas",
            "grid-template-columns": "defines the line names and track sizing functions of the grid columns",
            "grid-template-rows": "defines the line names and track sizing functions of the grid rows"
        },
        "Multi Column": {
            "column-count": "Specifies the number of columns an element should be divided into",
            "column-fill": "Specifies how to fill columns",
            "column-gap": "Specifies the gap between the columns",
            "column-rule": "A shorthand property for setting all the column-rule-* properties",
            "column-rule-color": "Specifies the color of the rule between columns",
            "column-rule-style": "Specifies the style of the rule between columns",
            "column-rule-width": "Specifies the width of the rule between columns",
            "column-span": "Specifies how many columns an element should span across",
            "column-width": "Specifies the width of the columns",
            "columns": "A shorthand property for setting column-width and column-count"
        }
    },

    "Animation": {
        "Animation": {
            "animation": "A shorthand property for all the animation properties below, except the animation-play-state property",
            "animation-name": "Specifies a name for the @keyframes animation",
            "animation-duration": "Specifies how many seconds or milliseconds an animation takes to complete one cycle",
            "animation-timing-function": "Specifies the speed curve of the animation",
            "animation-delay": "Specifies when the animation will start",
            "animation-fill-mode": "Specifies whether animation properties are applied before and after aniamtion execution",
            "animation-iteration-count": "Specifies the number of times an animation should be played",
            "animation-direction": "Specifies whether or not the animation should play in reverse on alternate cycles",
            "animation-play-state": "Specifies whether the animation is running or paused"
        },
        "2D/3D Transform": {
            "transform": "Applies a 2D or 3D transformation to an element",
            "transform-origin": "Allows you to change the position on transformed elements",
            "transform-style": "Specifies how nested elements are rendered in 3D space",
            "perspective": "Specifies the perspective on how 3D elements are viewed",
            "perspective-origin": "Specifies the bottom position of 3D elements",
            "backface-visibility": "Defines whether or not an element should be visible when not facing the screen"
        },
        "Transition": {
            "transition": "A shorthand property for setting the four transition properties",
            "transition-property": "Specifies the name of the CSS property the transition effect is for",
            "transition-duration": "Specifies how many seconds or milliseconds a transition effect takes to complete",
            "transition-timing-function": "Specifies the speed curve of the transition effect",
            "transition-delay": "Specifies when the transition effect will start"
        }
    },

    "Miscellaneous": {
        "At-rule": {
            "@charset": "specifies the character encoding",
            "@import": "used to import style rules from other style sheets",
            "@namespace": "that defines XML namespaces to be used in a CSS style sheet",
            "@media": "can be used to apply part of a style sheet based on the result of one or more media queries",
            "@supports": "lets you specify declarations that depend on a browser's support for one or more specific CSS features",
            "@document": "restricts the style rules contained within it based on the URL of the document",
            "@page": "used to modify some CSS properties when printing a document",
            "@font-face": "specifies a custom font with which to display text",
            "@keyframes": "Specifies the animation",
            "@viewport": "lets you configure the viewport through which the document is viewed",
            "@counter-style": "lets you define counter styles that are not part of the predefined set of styles",
            "@font-feature-values": "lets you use a common name in the font-variant-alternates property for features activated differently in OpenType"
        },
        "Print": {
            "page-break-after": "Sets the page-breaking behavior after an element",
            "page-break-before": "Sets the page-breaking behavior before an element",
            "page-break-inside": "Sets the page-breaking behavior inside an element"
        },
        "User Interface": {
            "appearance": "Allows you to make an element look like a standard user interface element",
            "box-sizing": "Allows you to define certain elements to fit an area in a certain way",
            "icon": "Provides the author the ability to style an element with an iconic equivalent",
            "nav-down": "Specifies where to navigate when using the arrow-down navigation key",
            "nav-index": "Specifies the tabbing order for an element",
            "nav-left": "Specifies where to navigate when using the arrow-left navigation key",
            "nav-right": "Specifies where to navigate when using the arrow-right navigation key",
            "nav-up": "Specifies where to navigate when using the arrow-up navigation key",
            "outline-offset": "Offsets an outline, and draws it beyond the border edge",
            "resize": "Specifies whether or not an element is resizable by the user"
        }
    },

    "Page": {
        "Generated Content": {
            "content": "Used with the :before and :after pseudo-elements, to insert generated content",
            "counter-increment": "Increments one or more counters",
            "counter-reset": "Creates or resets one or more counters",
            "quotes": "Sets the type of quotation marks for embedded quotations"
        }
    },

    "__PAGE__": "SCSS",
    "Syntax": {
        "Statements": {
            "Universal": "used anywhere in the Sass stylesheet",
            "CSS": "they can be used anywhere except within a \"@function\"",
            "Top-Level": "used at the top level of a stylesheet, or nested within a CSS statement at the top level"
        },
        "Expressions": {
            "Literalsv": "The simplest expressions just represent static values",
            "Operations": "defines syntax for a number of operations"
        },
        "Comments": {
            "Comment": "comments defined using /* */ that are (usually) compiled to CSS, and comments defined using // that are not"
        },
        "Special Functions": {
            "url()": "it can take either a quoted or unquoted URL",
            "expression()": "can be used to inject dynamic values"
        }
    },

    "Built-in Functions": {
        "Number Functions": {
            "abs()": "Returns the absolute value of $number",
            "ceil()": "Rounds $number up to the next highest whole number",
            "comparable()": "Returns whether $number1 and $number2 have compatible units",
            "floor()": "Rounds $number down to the next lowest whole number",
            "max()": "Returns the highest of one or more numbers",
            "min()": "Returns the lowest of one or more numbers",
            "percentage()": "Converts a unitless \"$number(usually a decimal between 0 and 1)\" to a percentage",
            "random()": "If $limit is null, returns a random decimal number between 0 and 1",
            "round()": "Rounds $number to the nearest whole number",
            "unit()": "Returns a string representation of $number's units",
            "unitless()": "Returns whether $number has no units"
        },
        "String Functions": {
            "quote()": "Returns $string as a quoted string",
            "str-index()": "Returns the first index of $substring in $string, or null if $string doesn’t contain $substring",
            "str-insert()": "Returns a copy of $string with $insert inserted at $index",
            "str-length()": "Returns the number of characters in $string",
            "str-slice()": "Returns the slice of $string starting at index $start-at and ending at index $end-at (both inclusive)",
            "to-upper-case()": "Returns a copy of $string with the ASCII letters converted to upper case",
            "to-lower-case()": "Returns a copy of $string with the ASCII letters converted to lower case",
            "unique-id()": "Returns a randomly-generated unquoted string that’s guaranteed to be a valid CSS identifier and to be unique within the current Sass compilation",
            "unquote()": "Returns $string as an unquoted string"
        },
        "Color Functions": {
            "adjust-color()": "Increases or decreases one or more properties of $color by fixed amounts",
            "adjust-hue()": "Increases or decreases $color’s hue",
            "alpha(), opacity()": "Returns the alpha channel of $color as a number between 0 and 1",
            "blue()": "Returns the blue channel of $color as a number between 0 and 255",
            "change-color()": "Sets one or more properties of a color to new values",
            "complement()": "Returns the RGB complement of $color",
            "darken()": "Makes $color darker",
            "desaturate()": "Makes $color less saturated",
            "grayscale()": "Returns a gray color with the same lightness as $color",
            "green()": "Returns the green channel of $color as a number between 0 and 255",
            "hsl(), hsla()": "Returns a color with the given hue, saturation, and lightness and the given alpha channel",
            "hue()": "Returns the hue of $color as a number between 0deg and 255deg",
            "ie-hex-str()": "Returns an unquoted string that represents $color in the #AARRGGBB format expected by Internet Explorer’s -ms-filter property",
            "invert()": "Returns the inverse or negative of $color",
            "lighten()": "Makes $color lighter",
            "lightness()": "Returns the HSL lightness of $color as a number between 0% and 100%",
            "mix()": "Returns a number that’s a mixture of $color1 and $color2",
            "opacify(), fade-in()": "Makes $color more opaque",
            "red()": "Returns the red channel of $color as a number between 0 and 255",
            "rgb(), rgba()": "If $red, $green, $blue, and optionally $alpha are passed, returns a color with the given red, green, blue, and alpha channels",
            "saturate()": "Makes $color more saturated",
            "saturation()": "Returns the HSL saturation of $color as a number between 0% and 100%",
            "scale-color()": "Fluidly scales one or more properties of $color",
            "transparentize(), fade-out()": "Makes $color more transparent"
        },
        "List Functions": {
            "append()": "Returns a copy of $list with $val added to the end",
            "index()": "Returns the index of $value in $list",
            "is-bracketed()": "Returns whether $list has square brackets",
            "join()": "Returns a new list containing the elements of $list1 followed by the elements of $list2",
            "length()": "Returns the length of $list",
            "list-separator()": "Returns the name of the separator used by $list, either space or comma",
            "nth()": "Returns the element of $list at index $n",
            "set-nth()": "Returns a copy of $list with the element at index $n replaced with $value",
            "zip()": "Combines every list in $lists into a single list of sub-lists"
        },
        "Map Functions": {
            "keywords()": "Returns the keywords passed to a mixin or function that takes arbitrary arguments",
            "map-get()": "Returns the value in $map associated with $key",
            "map-has-key()": "Returns whether $map contains a value associated with $key",
            "map-keys()": "Returns a comma-separated list of all the keys in $map",
            "map-merge()": "Returns a new map with all the keys and values from both $map1 and $map2",
            "map-remove()": "Returns a copy of $map without any values associated with $keys",
            "map-values()": "Returns a comma-separated list of all the values in $map"
        },
        "Selector Functions": {
            "is-superselector()": "Returns whether the selector $super matches all the elements that the selector $sub matches",
            "selector-extend()": "Extends $selector as with the @extend rule",
            "selector-nest()": "Combines $selectors as though they were nested within one another in the stylesheet",
            "selector-parse()": "Returns $selector in the selector value format",
            "selector-replace()": "Returns a copy of $selector with all instances of $original replaced by $replacement",
            "selector-unify()": "Returns a selector that matches only elements matched by both $selector1 and $selector2",
            "simple-selectors()": "Returns a list of simple selectors in $selector"
        },
        "Introspection Functions": {
            "call()": "Invokes $function with $args and returns the result",
            "content-exists()": "Returns whether the current mixin was passed a @content block",
            "feature-exists()": "Returns whether the current Sass implementation supports $feature",
            "function-exists()": "Returns whether a function named $name is defined, either as a built-in function or a user-defined function",
            "get-function()": "Returns the function named $name",
            "global-variable-exists()": "Returns whether a global variable named $name (without the $) exists",
            "inspect()": "Returns a string representation of $value",
            "mixin-exists()": "Returns whether a mixin named $name exists",
            "type-of()": "Returns the type of $value",
            "variable-exists()": "Returns whether a variable named $name (without the $) exists in the current scope"
        }
    },

    "Style Rules": {
        "Property Declarations": {
            "Interpolation": "a property’s \"#{name}\" can include interpolation, which makes it possible to dynamically generate properties as needed",
            "Nesting": "many CSS properties start with the same prefix that acts as a kind of namespace",
            "Hidden Declarations": "a declaration’s value is null or an empty unquoted string, Sass won’t compile that declaration to CSS at all",
            "Custom Properties": "they allow almost any text at all in their declaration values."
        },
        "Parent Selector": {
            "&Parent": "a special selector invented by Sass that’s used in nested selectors to refer to the outer selector"
        },
        "Placeholder Selectors": {
            "%Placeholder": "not included in the CSS output"
        }
    },

    "Variables": {
        "Variable": {
            "$variable": "can specify a variable to be used repeatedly"
        },
        "Default Values": {
            "!default": "Sets the initial value of the unassigned variable"
        },
        "Scope": {
            "scope": "Completes the directional scope within the declared block \"{}\""
        },
        "Shadowing": {
            "Reassignment": "Local variables can even be declared with the same name as a global variable"
        },
        "Global Values": {
            "!global": "the scope of the variable can be set to Global"
        },
        "Flow Control Scope": {
            "Control Scope": "they do not shadow variables at the same level as the flow control rule"
        },
        "Advanced Funtions": {
            "variable-exists()": "returns whether a variable with the given name exists in the current scope"
        }
    },

    "At-Rules": {
        "Rules": {
            "@import": "with the ability to import Sass and CSS stylesheets",
            "@mixin": "define a group of CSS declarations to be reused throughout the stylesheet",
            "@include": "\"@Include\" is required to use (include) a declared Mixin",
            "@function": "Functions can be defined and used",
            "@extend": "The selector's extensions are available",
            "@error": "Prints the value of the expression with a stack trace that indicates how the current mixin or function was called",
            "@warn": "Prints the value of the expression for the user, along with a stack trace that shows how the current mixin or function was called",
            "@debug": "Prints the value of the expression along with the file name and line number",
            "@at-root": "The nested document is now emitted from the root"
        },
        "Flow Control": {
            "@if, @else": "Returns only one of two expressions, depending on the value of the condition (true, false)",
            "@each": "used to repeat List and Map data",
            "@for": "Repeats the style",
            "@while": "Repeat the content until the condition evaluates to false"
        },
        "From CSS": {
            "@media": "SassScript expressions can be used directly in feature queries within media queries",
            "@supports": "allows SassScript expressions to be used in the declaration queries",
            "@keyframes": "works just like a general at-rule, except that its child rules must be valid keyframe rules"
        }
    },

    "Values": {
        "Data Types": {
            "Numbers": "Numbers have or do not have units",
            "Strings": "Characters have or do not have quotes",
            "Colors": "Represents a color representation",
            "Lists": "A list of values separated by spaces or \",(comma)\"",
            "Maps": "Similar to Lists, but the value is Key: Value",
            "true, false": "is a logical operator",
            "null": "Do not compile if null is used as an attribute value",
            "Functions": "function value exists, it can be called by passing it to the \"call()\" function"
        }
    },

    "Operators": {
        "Equality": {
            "==, !=": "Returns whether the two values are equal"
        },
        "Relational": {
            ">, <, >=, <=": "determine whether the numbers are greater or lesser than each other"
        },
        "Numeric": {
            "+, -, *, /, %": "supports the standard set of mathematical operators for numbers"
        },
        "String": {
            "expression + expression": "supports a few operators that generate strings"
        },
        "Boolean": {
            "true and true, true or false": "uses words rather than symbols for its boolean operators"
        }
    },

    "Breaking Change": {
        "Extending Compound": {
            "Selectors": "When one selector extends another, all elements that match the extender as though they also match the class being extended"
        },
        "CSS Variable Syntax": {
            "CSS Variable": "Parses a custom property declaration to accept a range of SassScript expressions as values"
        }
    },

    "__PAGE__": "LESS",
    "Syntax": {
        "Escaping": {
            "~anything": "Escapes the grammar that LESS does not recognize"
        },
        "Comments": {
            "Comment": "comments defined using /* */ that are (usually) compiled to CSS, and comments defined using // that are not"
        },
        "Namespaces and Accessors": {
            "Namespaces": "Namespaces are used to group the mixins under a common name"
        },
        "Scope": {
            "Scope": "Variable scope specifies the place of the available variable. The variables will be searched from the local scope and if they are not available, then compiler will search from the parent scope"
        }
    },

    "Style-Rules": {
        "Interpolation": {
            "@{variable}": "can put variable values anywhere in your code using \"@{}\""
        },
        "Parent Selectors": {
            "Multiple &": "It possible to repeatedly refer to a parent selector",
            "Changing Selector Order": "It can be useful to prepend a selector to the inherited (parent) selectors",
            "Combinatorial Explosion": "& can also be used to generate every possible permutation of selectors in a comma separated list"
        }
    },

    "Variables": {
        "Variable": {
            "@variable": "define a variable's name using another variable"
        },
        "Lazy Evaluation": {
            "Declared": "Variables do not have to be declared before being used"
        },
        "Properties as Variables": {
            "$prop": "easily treat properties like variables using the $prop syntax"
        },
        "Default Variables": {
            "Reassignment": "an ability to set a variable only if it is not already se"
        }
    },

    "At-Rules": {
        "Rules": {
            "Extend": "\":extend()\" which merges the selector it is put on with ones that match what it references",
            "Merge": "allows for aggregating values from multiple properties into a comma or space separated list under a single property",
            "Mixins": "define a group of CSS declarations to be reused throughout the stylesheet",
            "CSS Guards": "can also be applied to css selectors, which is syntactic sugar for declaring the mixin and then calling it immediately",
            "@import": "Import styles from other style sheets",
            "@plugin": "Import JavaScript plugins to add Less.js functions and features",
            "Maps": "Use rulesets and mixins as maps of values"
        }
    },

    "Detached Rulesets": {
        "Ruleset": {
            "Scoping" : "A detached ruleset can use all variables and mixins accessible where it is defined and where it is called",
            "Property / variable accessors": "can use property/variable accessors (also called \"lookups\") to select a value from variable (detached) rulesets"
        }
    },

    "Operators": {
        "Equality": {
            "==, !=": "Returns whether the two values are equal"
        },
        "Relational": {
            ">, <, >=, <=": "determine whether the numbers are greater or lesser than each other"
        },
        "Numeric": {
            "+, -, *, /, %": "supports the standard set of mathematical operators for numbers"
        },
        "String": {
            "expression + expression": "supports a few operators that generate strings"
        },
        "Boolean": {
            "true and true, true or false": "uses words rather than symbols for its boolean operators"
        }
    },

    "Built-in Functions": {
        "Logical Functions": {
            "if()": "Returns one of two values depending on a condition",
            "boolean": "Evaluates to true or false"
        },
        "String Functions": {
            "escape()": "Applies \"URL-encoding\" to special characters found in the input string",
            "e()": "String escaping",
            "%()": "The function \"%(string, arguments ...)\" formats a string",
            "replace()": "Replaces a text within a string"
        },
        "List Functions": {
            "escape()": "Returns the number of elements in a value list",
            "extract()": "Returns the value at a specified position in a list",
            "range()": "Generate a list spanning a range of values",
            "each()": "Bind the evaluation of a ruleset to each member of a list"
        },
        "Math Functions": {
            "ceil()": "Rounds up to the next highest integer",
            "floor()": "Rounds down to the next lowest integer",
            "percentage()": "Converts a floating point number into a percentage string",
            "round()": "Applies rounding",
            "sqrt()": "Calculates square root of a number. Keeps units as they are",
            "abs()": "Calculates absolute value of a number. Keeps units as they are",
            "sin()": "Calculates sine function",
            "asin()": "Calculates arcsine (inverse of sine) function",
            "cos()": "Calculates cosine function",
            "acos()": "Calculates arccosine (inverse of cosine) function",
            "tan()": "Calculates tangent function",
            "atan()": "Calculates arctangent (inverse of tangent) function",
            "pi()": "Returns π (pi)",
            "pow()": "Returns the value of the first argument raised to the power of the second argument",
            "mod()": "Returns the value of the first argument modulus second argument",
            "min()": "Returns the lowest of one or more values",
            "max()": "Returns the highest of one or more values"
        },
        "Type Functions": {
            "isnumber()": "Returns true if a value is a number, false otherwise",
            "isstring()": "Returns true if a value is a string, false otherwise",
            "iscolor()": "Returns true if a value is a color, false otherwise",
            "iskeyword()": "Returns true if a value is a keyword, false otherwise",
            "isurl()": "Returns true if a value is a url, false otherwise",
            "ispixel()": "Returns true if a value is a number in pixels, false otherwise",
            "isem()": "Returns true if a value is an em value, false otherwise",
            "ispercentage()": "Returns true if a value is a percentage value, false otherwise",
            "isunit()": "Returns true if a value is a number in specified units, false otherwise",
            "isruleset()": "Returns true if a value is a ruleset, false otherwise"
        },
        "Misc Functions": {
            "color()": "Parses a color, so a string representing a color becomes a color",
            "image-size()": "Gets the image dimensions from a file",
            "image-width()": "Gets the image width from a file",
            "image-height()": "Gets the image height from a file",
            "convert()": "Convert a number from one unit into another",
            "data-uri()": "Inlines a resource and falls back to \"url()\" if the ieCompat option is on and the resource is too large, or if you use the function in the browser",
            "default()": "Available only inside guard conditions and returns true only if no other mixin matches, false otherwise",
            "unit()": "Remove or change the unit of a dimension",
            "get-unit()": "Returns units of a number",
            "svg-gradient()": "Generates multi-stop svg gradients"
        },
        "Color Definition Functions": {
            "rgb()": "Creates an opaque color object from decimal red, green and blue (RGB) values",
            "rgba()": "Creates a transparent color object from decimal red, green, blue and alpha (RGBA) values",
            "argb()": "Creates a hex representation of a color in #AARRGGBB format (NOT #RRGGBBAA!)",
            "hsl()": "Creates an opaque color object from hue, saturation and lightness (HSL) values",
            "hsla()": "Creates a transparent color object from hue, saturation, lightness and alpha (HSLA) values",
            "hsv()": "Creates an opaque color object from hue, saturation and value (HSV) values",
            "hsva()": "Creates a transparent color object from hue, saturation, value and alpha (HSVA) values"
        },
        "Color Channel Functions": {
            "hue()": "Extracts the hue channel of a color object in the HSL color space",
            "saturation()": "Extracts the saturation channel of a color object in the HSL color space",
            "lightness()": "Extracts the lightness channel of a color object in the HSL color space",
            "hsvhue()": "Extracts the hue channel of a color object in the HSV color space",
            "hsvsaturation()": "Extracts the saturation channel of a color object in the HSV color space",
            "hsvvalue()": "Extracts the value channel of a color object in the HSV color space",
            "red()": "Extracts the red channel of a color object",
            "green()": "Extracts the green channel of a color object",
            "blue()": "Extracts the blue channel of a color object",
            "alpha()": "Extracts the alpha channel of a color object",
            "luma()": "Calculates the \"luma\" (perceptual brightness) of a color object",
            "luminance()": "Calculates the value of the luma without gamma correction"
        },
        "Color Operation Functions": {
            "saturate()": "Increase the saturation of a color in the HSL color space by an absolute amount",
            "desaturate()": "Decrease the saturation of a color in the HSL color space by an absolute amount",
            "lighten()": "Increase the lightness of a color in the HSL color space by an absolute amount",
            "darken()": "Decrease the lightness of a color in the HSL color space by an absolute amount",
            "fadein()": "Decrease the transparency (or increase the opacity) of a color, making it more opaque",
            "fadeout()": "Increase the transparency (or decrease the opacity) of a color, making it less opaque",
            "fade()": "Set the absolute opacity of a color",
            "spin()": "Rotate the hue angle of a color in either direction",
            "mix()": "Mix two colors together in variable proportion. Opacity is included in the calculations",
            "tint()": "Mix color with white in variable proportion. It is the same as calling ",
            "shade()": "Mix color with black in variable proportion. It is the same as calling ",
            "greyscale()": "Remove all saturation from a color in the HSL color space",
            "contrast()": "Choose which of two colors provides the greatest contrast with another"
        },
        "Color Blending Functions": {
            "multiply()": "Multiply two colors.",
            "screen()": "Do the opposite of \"multiply\"",
            "overlay()": "Combines the effects of both \"multiply\" and \"screen\"",
            "softlight()": "Similar to overlay but avoids pure black resulting in pure black, and pure white resulting in pure white",
            "hardlight()": "The same as \"overlay\" but with the color roles reversed",
            "difference()": "Subtracts the second color from the first color on a channel-by-channel basis",
            "exclusion()": "A similar effect to \"difference\" with lower contrast",
            "average()": "Compute the average of two colors on a per-channel (RGB) basis",
            "negation()": "Do the opposite effect to \"difference\""
        }
    },

    "__PAGE__": "DOM",
    "HTML DOM": {
        "Elements Properties": {
            "accessKey": "Sets or returns an accesskey for an element",
            "className": "Sets or returns the class attribute of an element",
            "clientHeight": "Returns the viewable height of the content on a page (not including borders, margins, or scrollbars)",
            "clientWidth": "Returns the viewable width of the content on a page (not including borders, margins, or scrollbars)",
            "dir": "Sets or returns the text direction of an element",
            "id": "Sets or returns the id of an element",
            "innerHTML": "Sets or returns the HTML contents (+text) of an element",
            "lang": "Sets or returns the language code for an element",
            "offsetHeight": "Returns the height of an element, including borders and padding if any, but not margins",
            "offsetLeft": "Returns the horizontal offset position of the current element relative to its offset container",
            "offsetParent": "Returns the offset container of an element",
            "offsetTop": "Returns the vertical offset position of the current element relative to its offset container",
            "offsetWidth": "Returns the width of an element, including borders and padding if any, but not margins",
            "scrollHeight": "Returns the entire height of an element (including areas hidden with scrollbars)",
            "scrollLeft": "Returns the distance between the actual left edge of an element and its left edge currently in view",
            "scrollTop": "Returns the distance between the actual top edge of an element and its top edge currently in view",
            "scrollWidth": "Returns the entire width of an element (including areas hidden with scrollbars)",
            "style": "Sets or returns the style attribute of an element",
            "tabIndex": "Sets or returns the tab order of an element",
            "title": "Sets or returns the title attribute of an element"
        },
        "Elements Methods": {
            "toString()": "Converts an element to a string"
        },
        "Document Properties": {
            "applets": "Returns a collection of all the applets in the document",
            "body": "Returns the body element of the document",
            "cookie": "Returns all name/value pairs of cookies in the document",
            "documentMode": "Returns the mode used by the browser to render the document",
            "domain": "Returns the domain name of the server that loaded the document",
            "forms": "Returns a collection of all the forms in the document",
            "images": "Returns a collection of all the images in the document",
            "lastModified": "Returns the date and time the document was last modified",
            "links": "Returns a collection of all the links in the document",
            "readyState": "Returns the (loading) status of the document",
            "referrer": "Returns the URL of the document that loaded the current document",
            "title": "Sets or returns the title of the document",
            "URL": "Returns the full URL of the document"
        },
        "Document Methods": {
            "close()": "Closes the output stream previously opened with document.open()",
            "getElementsByName()": "Accesses all elements with a specified name",
            "open()": "Opens an output stream to collect the output from document.write() or document.writeln()",
            "write()": "Writes HTML expressions or JavaScript code to a document",
            "writeln()": "Same as write(), but adds a newline character after each statement"
        },
        "HTML Object Properties": {
            "align": "Sets or returns the alignment of the object according to the surrounding text",
            "archive": "Sets or returns a string that can be used to implement your own archive functionality for the object",
            "border": "Sets or returns the border around the object",
            "code": "Sets or returns the URL of the file that contains the compiled Java class",
            "codeBase": "Sets or returns the URL of the component",
            "codeType": "Sets the MIME type (media type) of the application that should be used by the object",
            "data": "Sets the location of the data for an object",
            "declare": "Sets whether an object is only a declaration (it isn't downloaded until it's needed)",
            "form": "Returns a reference to the object's parent form",
            "height": "Sets or returns the height of the object",
            "hspace": "Sets or returns the horizontal margin of the object",
            "name": "Sets or returns the name of the object",
            "standby": "Sets or returns a message when loading the object",
            "type": "Sets or returns the content type for data downloaded via the data attribute",
            "useMap": "Sets the URL to use as an image map",
            "vspace": "Sets or returns the vertical margin of the object",
            "width": "Sets or returns the width of the object"
        },
        "Area Object Properties": {
            "alt": "Sets or returns the value of the alt attribute of an area",
            "coords": "Sets or returns the value of the coords attribute of an area",
            "shape": "Sets or returns the value of the shape attribute of an area",
            "target": "Sets or returns the value of the target attribute of an area"
        },
        "Base Object Properties": {
            "hash": "Sets or returns the anchor part of the href attribute value",
            "host": "Sets or returns the hostname:port part of the href attribute value",
            "hostname": "Sets or returns the hostname part of the href attribute value",
            "href": "Sets or returns the value of the href attribute in a base element",
            "noHref": "Sets or returns the value of the nohref attribute of an area",
            "pathname": "Sets or returns the pathname part of the href attribute value",
            "port": "Sets or returns the port part of the href attribute value",
            "protocol": "Sets or returns the protocol part of the href attribute value",
            "search": "Sets or returns the querystring part of the href attribute value"
        },
        "Frame Object Properties": {
            "contentDocument": "Returns the document object generated by a frame/iframe",
            "height": "Sets or returns the value of the height attribute in an iframe",
            "name": "Sets or returns the value of the name attribute in a frame/iframe",
            "src": "Sets or returns the value of the src attribute in a frame/iframe",
            "width": "Sets or returns the value of the width attribute in an iframe"
        },
        "Meta Properties": {
            "content": "Sets or returns the value of the content attribute of a meta element",
            "httpEquiv": "Sets or returns an HTTP header for the information in the content attribute",
            "name": "Sets or returns a name for the information in the content attribute"
        }
    },

    "DOM Node": {
        "Node Properties": {
            "attributes": "Returns a collection of a node's attributes",
            "baseURI": "Returns the absolute base URI of a node",
            "childNodes": "Returns a NodeList of child nodes for a node",
            "firstChild": "Returns the first child of a node",
            "lastChild": "Returns the last child of a node",
            "nextSibling": "Returns the next node at the same node tree level",
            "localName": "Returns the local part of the name of a node",
            "nodeType": "Returns the type of a node",
            "nodeValue": "Sets or returns the value of a node, depending on its type",
            "nodeName": "Returns the name of a node, depending on its type",
            "ownerDocument": "Returns the root element (document object) for a node",
            "parentNode": "Returns the parent node of a node",
            "previousSibling": "Returns the previous node at the same node tree level",
            "textContent": "Sets or returns the textual content of a node and its descendants"
        },
        "Node Methods": {
            "appendChild()": "Adds a new child node, to the specified node, as the last child node",
            "cloneNode()": "Clones a node",
            "compareDocumentPosition()": "Compares the document position of two nodes",
            "hasChildNodes()": "Returns true if a node has any child nodes, otherwise it returns false",
            "insertBefore()": "Inserts a new child node before a specified, existing, child node",
            "isDefaultNamespace()": "Returns true if the specified namespaceURI is the default, otherwise false",
            "isEqualNode()": "Checks if two nodes are equal",
            "isSameNode()": "Checks if two nodes are the same node",
            "lookupNamespaceURI()": "Returns the namespace URI matching a specified prefix",
            "lookupPrefix()": "Returns the prefix matching a specified namespace URI",
            "normalize()": "Joins adjacent text nodes and removes empty text nodes",
            "removeChild()": "Removes a child node",
            "replaceChild()": "Replaces a child node"
        },
        "Node Types": {
            "1. Element": "Represents an element",
            "2. Attr": "Represents an attribute",
            "3. Text": "Represents textual content in an element or attribute",
            "4. CDATASection": "Represents a CDATA section in a document (text that will NOT be parsed by a parser)",
            "5. EntityReference": "Represents an entity reference",
            "6. Entity": "Represents an entity",
            "7. ProcessingInstruction": "Represents a processing instruction",
            "8. Comment": "Represents a comment",
            "9. Document": "Represents the entire document (the root-node of the DOM tree)",
            "10. DocumentType": "Provides an interface to the entities defined for the document",
            "11. DocumentFragment": "Represents a 'lightweight' Document object, which can hold a portion of a document",
            "12. Notation": "Represents a notation declared in the DTD"
        },
        "nodeName Returns": {
            "Element": "element name",
            "Attr": "attribute name",
            "Text": "#text",
            "CDATASection": "#cdata-section",
            "EntityReference": "entity reference name",
            "Entity": "entity name",
            "ProcessingInstruction": "target",
            "Comment": "#comment",
            "Document": "#document",
            "DocumentType": "doctype name",
            "DocumentFragment": "#document fragment",
            "Notation": "notation name"
        },
        "nodeValue Returns": {
            "Element": "null",
            "Attr": "attribute value",
            "Text": "content of node",
            "CDATASection": "content of node",
            "EntityReference": "null",
            "Entity": "null",
            "ProcessingInstruction": "content of node",
            "Comment": "comment text",
            "Document": "null",
            "DocumentType": "null",
            "DocumentFragment": "null",
            "Notation": "null"
        }
    },

    "DOM Events": {
        "Mouse Events": {
            "click": "The event occurs when the user clicks on an element",
            "dblclick": "The event occurs when the user double-clicks on an element",
            "mousedown": "The event occurs when a user presses a mouse button over an element",
            "mousemove": "The event occurs when a user moves the mouse pointer over an element",
            "mouseover": "The event occurs when a user mouse over an element",
            "mouseout": "The event occurs when a user moves the mouse pointer out of an element",
            "mouseup": "The event occurs when a user releases a mouse button over an element"
        },
        "Keyboard Events": {
            "keydown": "The event occurs when the user is pressing a key or holding down a key",
            "keypress": "The event occurs when the user is pressing a key or holding down a key",
            "keyup": "The event occurs when a keyboard key is released"
        },
        "Frame Events": {
            "abort": "The event occurs when an image is stopped from loading before completely loaded (for <object>)",
            "error": "The event occurs when an image does not load properly",
            "load": "The event occurs when a document, frameset, or <object> has been loaded",
            "resize": "The event occurs when a document view is resized",
            "scroll": "The event occurs when a document view is scrolled",
            "unload": "The event occurs when a document is removed from a window or frame (for <body> and <frameset>)"
        },
        "Form Events": {
            "blur": "The event occurs when a form element loses focus",
            "change": "The event occurs when the content of a form element, the selection, or the checked state have changed (for <input>, <select>, and <textarea>)",
            "focus": "The event occurs when an element gets focus (for <label>, <input>, <select>, textarea>, and <button>)",
            "reset": "onreset",
            "select": "The event occurs when a user selects some&nbsp; text (for <input> and <textarea>)",
            "onsubmit": "The event occurs when a form is submitted"
        },
        "Event Object Constant": {
            "AT_TARGET": "The current event is in the target phase, i.e. it is being evaluated at the event target (1)",
            "BUBBLING_PHASE": "The current event phase is the bubbling phase (2)",
            "CAPTURING_PHASE": "The current event phase is the capture phase (3)"
        },
        "Event Object Properties": {
            "bubbles": "Returns whether or not an event is a bubbling event",
            "cancelable": "Returns whether or not an event can have its default action prevented",
            "currentTarget": "Returns the element whose event listeners triggered the event",
            "eventPhase": "Returns which phase of the event flow is currently being evaluatedReturns which phase of the event flow is currently being evaluated",
            "target": "Returns the element that triggered the event",
            "timeStamp": "Returns the time (in milliseconds relative to the epoch) at which the event was created",
            "type": "Returns the name of the event"
        },
        "Event Object Methods": {
            "initEvent()": "Specifies the event type, whether or not the event can bubble, whether or not the event's default action can be prevented",
            "preventDefault()": "To cancel the event if it is cancelable, meaning that any default action normally taken by the implementation as a result of the event will not occur",
            "stopPropagation()": "To prevent further propagation of an event during event flow"
        },
        "EventTarget Object": {
            "addEventListener()": "Allows the registration of event listeners on the event target (IE8 = attachEvent())",
            "dispatchEvent()": "Allows to send the event to the subscribed event listeners (IE8 = fireEvent())",
            "removeEventListener()": "Allows the removal of event listeners on the event target (IE8 = detachEvent())"
        },
        "EventListener Object": {
            "handleEvent()": "Called whenever an event occurs of the event type for which the EventListener interface was registered"
        },
        "MouseEvent/KeyboardEvent Object": {
            "altKey": "Returns whether or not the \"ALT\" key was pressed when an event was triggered",
            "button": "Returns which mouse button was clicked when an event was triggered",
            "clientX": "Returns the vertical coordinate of the mouse pointer, relative to the current window, when an event was triggered",
            "clientY": "Returns the vertical coordinate of the mouse pointer, relative to the current window, when an event was triggered",
            "ctrlKey": "Returns whether or not the \"CTRL\" key was pressed when an event was triggered",
            "keyIdentifier": "Returns the identifier of a key",
            "keyLocation": "Returns the location of the key on the advice",
            "metaKey": "Returns whether or not the \"meta\" key was pressed when an event was triggered",
            "relatedTarget": "Returns the element related to the element that triggered the event",
            "screenX": "Returns the horizontal coordinate of the mouse pointer, relative to the screen, when an event was triggered",
            "screenY": "Returns the vertical coordinate of the mouse pointer, relative to the screen, when an event was triggered",
            "shiftKey": "Returns whether or not the \"SHIFT\" key was pressed when an event was triggered"
        },
        "MouseEvent/KeyboardEvent Methods": {
            "initMouseEvent()": "Initializes the value of a MouseEvent object",
            "initKeyboardEvent()": "Initializes the value of a KeyboardEvent object"
        }
    },

    "DOM Input": {
        "Button Properties": {
            "disabled": "Sets or returns whether a button is disabled, or not",
            "form": "Returns a reference to the form that contains the input button",
            "name": "Sets or returns the value of the name attribute of an input button",
            "type": "Returns which type of form element the button is",
            "value": "Sets or returns the value of the value attribute of a button"
        },
        "Checkbox Properties": {
            "disabled": "Sets or returns whether a checkbox is disabled, or not",
            "checked": "Sets or returns the checked state of a checkbox",
            "form": "Returns a reference to the form that contains the checkbox",
            "name": "Sets or returns the value of the name attribute of a checkbox",
            "type": "Returns which type of form element the checkbox is",
            "value": "Sets or returns the value of the value attribute of a checkbox"
        },
        "File Properties": {
            "disabled": "Sets or returns whether the fileUpload button is disabled, or not",
            "accept": "Sets or returns a comma-separated list of accepted content types",
            "form": "Returns a reference to the form that contains the FileUpload object",
            "name": "Sets or returns the value of the name attribute of the FileUpload object",
            "type": "Returns which type of form element the FileUpload object is",
            "value": "Returns the path or the name of the selected file"
        },
        "Hidden Properties": {
            "form": "Returns a reference to the form that contains the hidden input field",
            "name": "Sets or returns the value of the name attribute of the hidden input field",
            "type": "Returns which type of form element a hidden input field is",
            "value": "Sets or returns the value of the value attribute of the hidden input field"
        },
        "Password Properties": {
            "defaultValue": "Sets or returns the default value of a password field",
            "disabled": "Sets or returns whether the password field is disabled, or not",
            "form": "Returns a reference to the form that contains the password field",
            "maxlength": "Sets or returns the maximum number of characters allowed in a password field",
            "name": "Sets or returns the value of the name attribute of a password field",
            "readonly": "Sets or returns whether a password field is read-only, or not",
            "size": "Sets or returns the width of a password field (in number of characters)",
            "type": "Returns which type of form element a password field is",
            "value": "Sets or returns the value of the value attribute of the password field"
        },
        "Password Methods": {
            "select()": "Selects the content of a password field"
        },
        "Radio Properties": {
            "checked": "Sets or returns the checked state of a radio button",
            "defaultChecked": "Returns the default value of the checked attribute",
            "disabled": "Sets or returns whether the radio button is disabled, or not",
            "form": "Returns a reference to the form that contains the radio button",
            "name": "Sets or returns the value of the name attribute of a radio button",
            "type": "Returns which type of form element the radio button is",
            "value": "Sets or returns the value of the value attribute of the radio button"
        },
        "Reset Properties": {
            "disabled": "Sets or returns whether the reset button is disabled, or not",
            "form": "Returns a reference to the form that contains the reset button",
            "name": "Sets or returns the value of the name attribute of a reset button",
            "type": "Returns which type of form element the reset button is",
            "value": "Sets or returns the value of the value attribute of the reset button"
        },
        "Submit Properties": {
            "disabled": "Sets or returns whether the submit button is disabled, or not",
            "form": "Returns a reference to the form that contains the submit button",
            "name": "Sets or returns the value of the name attribute of a submit button",
            "type": "Returns which type of form element the submit button is",
            "value": "Sets or returns the value of the value attribute of the submit button"
        },
        "Text Properties": {
            "defaultValue": "Sets or returns the default value of a text field",
            "disabled": "Sets or returns whether the text field is disabled, or not",
            "form": "Returns a reference to the form that contains the text field",
            "maxlength": "Sets or returns the maximum number of characters allowed in a text field",
            "name": "Sets or returns the value of the name attribute of a text field",
            "readonly": "Sets or returns whether a text field is read-only, or not",
            "size": "Sets or returns the width of a text field (in number of characters)",
            "type": "Returns which type of form element a text field is",
            "value": "Sets or returns the value of the value attribute of the text field"
        },
        "Text Methods": {
            "select()": "Selects the content of a text field"
        }
    },

    "Dom Elements": {
        "Anchor Object Properties": {
            "charset": "Sets or returns the value of the charset attribute of a link",
            "href": "Sets or returns the value of the href attribute of a link",
            "hreflang": "Sets or returns the value of the hreflang attribute of a link",
            "rel": "Sets or returns the value of the rel attribute of a link",
            "rev": "Sets or returns the value of the rev attribute of a link",
            "target": "Sets or returns the value of the target attribute of a link",
            "type": "Sets or returns the value of the type attribute of a link"
        },
        "Button Object Properties": {
            "disabled": "Sets or returns whether a button is disabled, or not",
            "form": "Returns a reference to the form that contains a button",
            "name": "Sets or returns the value of the name attribute of a button",
            "type": "Sets or returns the type of a button",
            "value": "Sets or returns the value of the value attribute of a button"
        },
        "Form Object Properties": {
            "acceptCharset": "Sets or returns the value of the accept-charset attribute in a form",
            "action": "Sets or returns the value of the action attribute in a form",
            "enctype": "Sets or returns the value of the enctype attribute in a form",
            "length": "Returns the number of elements in a form",
            "method": "Sets or returns the value of the method attribute in a form",
            "name": "Sets or returns the value of the name attribute in a form",
            "target": "Sets or returns the value of the target attribute in a form"
        },
        "Form Object Methods": {
            "reset()": "Resets a form",
            "submit()": "Submits a form"
        },
        "Form Object Events": {
            "onreset": "The reset button is clicked",
            "onsubmit": "The submit button is clicked"
        },
        "Image Object Properties": {
            "alt": "Sets or returns the value of the alt attribute of an image",
            "complete": "Returns whether or not the browser is finished loading an image",
            "crossOrigin": "string which specifies the Cross-Origin Resource Sharing (CORS) setting to use when retrieving the image",
            "currentSrc": "URL of the image which is currently presented in the img element it represents",
            "decoding": "hint given to the browser on how it should decode the image",
            "height": "Sets or returns the value of the height attribute of an image",
            "isMap": "Boolean value which indicates that the image is to be used by a server-side image map",
            "naturalHeight": "returns the intrinsic (natural), density-corrected width of the image in CSS pixels",
            "naturalWidth": " returns the intrinsic (natural), density-corrected width of the image in CSS pixels",
            "referrerPolicy": "element defining which referrer is sent when fetching the resource",
            "sizes": "allows you to specify the layout width of the image for each of a list of media conditions",
            "src": "Sets or returns the value of the src attribute of an image",
            "srcset": "string which identifies one or more image candidate strings, , separated using commas (,) each specifying image resources to use under given circumstances",
            "useMap": "Sets or returns the value of the usemap attribute of an image",
            "width": "Sets or returns the value of the width attribute of an image"
        },
        "Image Object Events": {
            "onerror": "An error occurs when loading an image",
            "onload": "An image is finished loading"
        },
        "Link Properties": {
            "href": "Sets or returns the URL of a linked document",
            "hreflang": "Sets or returns the language code of the linked document",
            "media": "Sets or returns the media type for the link element",
            "rel": "Sets or returns the relationship between the current document and the linked document",
            "type": "Sets or returns the content type of the linked document"
        },
        "Option Properties": {
            "defaultSelected": "Returns the default value of the selected attribute",
            "disabled": "Sets or returns whether an option is disabled, or not",
            "form": "Returns a reference to the form that contains the option",
            "index": "Sets or returns the index position of an option in a dropdown list",
            "selected": "Sets or returns the value of the selected attribute",
            "text": "Sets or returns the text of an option element",
            "value": "Sets or returns the value to be sent to the server"
        },
        "Select Properties": {
            "disabled": "Sets or returns whether the dropdown list is disabled, or not",
            "form": "Returns a reference to the form that contains the dropdown list",
            "length": "Returns the number of options in a dropdown list",
            "multiple": "Sets or returns whether more than one item can be selected from the dropdown list",
            "name": "Sets or returns the name of a dropdown list",
            "selectedIndex": "Sets or returns the index of the selected option in a dropdown list",
            "size": "Sets or returns the number of visible options in a dropdown list",
            "type": "Returns which type of form element a dropdown list is"
        },
        "Select Methods": {
            "add()": "Adds an option to a dropdown list",
            "remove()": "Removes an option from a dropdown list"
        },
        "Textarea Properties": {
            "cols": "Sets or returns the width of a text area",
            "defaultValue": "Sets or returns the default value of a text area",
            "disabled": "Sets or returns whether the text area is disabled, or not",
            "form": "Returns a reference to the form that contains the text area",
            "name": "Sets or returns the name of a text area",
            "readonly": "Sets or returns whether the contents of a text area is read-only",
            "rows": "Sets or returns the height (in rows) of a text area",
            "type": "Returns the type of the form element the text area is",
            "value": "Sets or returns the contents of a text area"
        }
    },

    "Dom Style": {
        "Background Properties": {
            "background": "Sets or returns all the background properties in one declaration",
            "backgroundAttachment": "Sets or returns whether a background-image is fixed or scrolls with the page",
            "backgroundColor": "Sets or returns the background-color of an element",
            "backgroundImage": "Sets or returns the background-image for an element",
            "backgroundPosition": "Sets or returns the starting position of a background-image",
            "backgroundRepeat": "Sets or returns how to repeat (tile) a background-image"
        },
        "Border/Outline Properties": {
            "border": "Sets or returns border-width, border-style, and border-color in one declaration",
            "borderBottom": "Sets or returns all the borderBottom* properties in one declaration",
            "borderBottomColor": "Sets or returns the color of the bottom border",
            "borderBottomStyle": "Sets or returns the style of the bottom border",
            "borderBottomWidth": "Sets or returns the width of the bottom border",
            "borderColor": "Sets or returns the color of an element's border (can have up to four values)",
            "borderLeft": "Sets or returns all the borderLeft* properties in one declaration",
            "borderLeftColor": "Sets or returns the color of the left border",
            "borderLeftStyle": "Sets or returns the style of the left border",
            "borderLeftWidth": "Sets or returns the width of the left border",
            "borderRight": "Sets or returns all the borderRight* properties in one declaration",
            "borderRightColor": "Sets or returns the color of the right border",
            "borderRightStyle": "Sets or returns the style of the right border",
            "borderRightWidth": "Sets or returns the width of the right border",
            "borderStyle": "Sets or returns the style of an element's border (can have up to four values)",
            "borderTop": "Sets or returns all the borderTop* properties in one declaration",
            "borderTopColor": "Sets or returns the color of the top border",
            "borderTopStyle": "Sets or returns the style of the top border",
            "borderTopWidth": "Sets or returns the width of the top border",
            "borderWidth": "Sets or returns the width of an element's border (can have up to four values)",
            "outline": "Sets or returns all the outline properties in one declaration",
            "outlineColor": "Sets or returns the color of the outline around a element",
            "outlineStyle": "Sets or returns the style of the outline around an element",
            "outlineWidth": "Sets or returns the width of the outline around an element"
        },
        "Generated Content Properties": {
            "content": "Sets or returns the generated content before or after the element",
            "counterIncrement": "Sets or returns the list of counters and increment values",
            "counterReset": "Sets or returns the list of counters and their initial values"
        },
        "List Properties": {
            "listStyle": "Sets or returns list-style-image, list-style-position, and list-style-type in one declaration",
            "listStyleImage": "Sets or returns an image as the list-item marker",
            "listStylePosition": "Sets or returns the position of the list-item marker",
            "listStyleType": "Sets or returns the list-item marker type"
        },
        "Margin/Padding Properties": {
            "margin": "Sets or returns the margins of an element (can have up to four values)",
            "marginBottom": "Sets or returns the bottom margin of an element",
            "marginLeft": "Sets or returns the left margin of an element",
            "marginRight": "Sets or returns the right margin of an element",
            "marginTop": "Sets or returns the top margin of an element",
            "padding": "Sets or returns the padding of an element (can have up to four values)",
            "paddingBottom": "Sets or returns the bottom padding of an element",
            "paddingLeft": "Sets or returns the left padding of an element",
            "paddingRight": "Sets or returns the right padding of an element",
            "paddingTop": "Sets or returns the top padding of an element"
        },
        "Misc Properties": {
            "cssText": "Sets or returns the contents of a style declaration as a string"
        },
        "Positioning Properties": {
            "bottom": "Sets or returns the bottom position of a positioned element",
            "clear": "Sets or returns the position of the element relative to floating objects",
            "clip": "Sets or returns which part of a positioned element is visible",
            "cssFloat": "Sets or returns the horizontal alignment of an object",
            "cursor": "Sets or returns the type of cursor to display for the mouse pointer",
            "display": "Sets or returns an element's display type",
            "height": "Sets or returns the height of an element",
            "left": "Sets or returns the left position of a positioned element",
            "maxHeight": "Sets or returns the maximum height of an element",
            "maxWidth": "Sets or returns the maximum width of an element",
            "minHeight": "Sets or returns the minimum height of an element",
            "minWidth": "Sets or returns the minimum width of an element",
            "overflow": "Sets or returns what to do with content that renders outside the element box",
            "position": "Sets or returns the type of positioning method used for an element (static, relative, absolute or fixed)",
            "right": "Sets or returns the right position of a positioned element",
            "top": "Sets or returns the top position of a positioned element",
            "verticalAlign": "Sets or returns the vertical alignment of the content in an element",
            "visibility": "Sets or returns whether an element should be visible",
            "width": "Sets or returns the width of an element",
            "zIndex": "Sets or returns the stack order of a positioned element"
        },
        "Printing Properties": {
            "orphans": "Sets or returns the minimum number of lines for an element that must be visible at the bottom of a page",
            "pageBreakAfter": "Sets or returns the page-break behavior after an element",
            "pageBreakBefore": "Sets or returns the page-break behavior before an element",
            "pageBreakInside": "Sets or returns the page-break behavior inside an element",
            "widows": "Sets or returns the minimum number of lines for an element that must be visible at the top of a page"
        },
        "Table Properties": {
            "borderCollapse": "Sets or returns whether the table border should be collapsed into a single border, or not",
            "borderSpacing": "Sets or returns the space between cells in a table",
            "captionSide": "Sets or returns the position of the table caption",
            "emptyCells": "Sets or returns whether to show the border and background of empty cells, or not",
            "tableLayout": "Sets or returns the way to lay out table cells, rows, and columns"
        },
        "Text Properties": {
            "color": "Sets or returns the color of the text",
            "direction": "Sets or returns the text direction",
            "font": "Sets or returns font-style, font-variant, font-weight, font-size, line-height, and font-family in one declaration",
            "fontFamily": "Sets or returns the font face for text",
            "fontSize": "Sets or returns the font size of the text",
            "fontSizeAdjust": "Sets or returns the font aspect value",
            "fontStyle": "Sets or returns whether the style of the font is normal, italic or oblique",
            "fontVariant": "Sets or returns whether the font should be displayed in small capital letters",
            "fontWeight": "Sets or returns the boldness of the font",
            "letterSpacing": "Sets or returns the space between characters in a text",
            "lineHeight": "Sets or returns the distance between lines in a text",
            "quotes": "Sets or returns the type of quotation marks for embedded quotations",
            "textAlign": "Sets or returns the horizontal alignment of text",
            "textDecoration": "Sets or returns the decoration of a text",
            "textIndent": "Sets or returns the indentation of the first line of text",
            "textShadow": "Sets or returns the shadow effect of a text",
            "textTransform": "Sets or returns the case of a text",
            "unicodeBidi": "Sets or returns whether the text should be overridden to support multiple languages in the same document",
            "whiteSpace": "Sets or returns how to handle tabs, line breaks and whitespace in a text",
            "wordSpacing": "Sets or returns the spacing between words in a text"
        }
    },

    "Dom Table": {
        "Table Object Collections": {
            "rows": "Returns a collection of all tr elements in a table",
            "tBodies": "Returns a collection of all tbody elements in a table"
        },
        "Table Properties": {
            "caption": "Returns the caption of a table",
            "cellPadding": "Sets or returns the amount of space between the cell border and cell content",
            "frame": "Sets or returns which outer-borders (of a table) that should be displayed",
            "rules": "Sets or returns which inner-borders (between the cells) that should be displayed in a table",
            "summary": "Sets or returns a description of the data in a table",
            "tFoot": "Returns a reference to the tfoot element of a table",
            "tHead": "Returns a reference to the thead element of a table"
        },
        "Table Methods": {
            "createCaption()": "Creates an empty caption element and adds it to the table",
            "createTFoot()": "Creates an empty tfoot element and adds it to the table",
            "createTHead()": "Creates an empty thead element and adds it to the table",
            "deleteCaption()": "Removes the first caption element from the table",
            "deleteRow()": "Removes a row from the table",
            "deleteTFoot()": "Removes the tfoot element from the table",
            "deleteTHead()": "Removes the thead element from the table",
            "insertRow()": "Creates an empty tr element and adds it to the table"
        },
        "Td/Th Properties": {
            "abbr": "Sets or returns an abbreviated version of the content in a data cell",
            "colspan": "Sets or returns the number of columns a cell should span",
            "headers": "Sets or returns a list of header cell ids for the current data cell",
            "rowspan": "Sets or returns the number of rows a cell should span",
            "scope": "th 요소에 정의 된 셀을 정의"
        }
    },

    "__PAGE__": "SVG",
    "Graphics": {
        "Elements": {
            "<circle>": "used to draw circles based on a center point and a radius",
            "<ellipse>": "used to create ellipses based on a center coordinate, and both their x and y radius",
            "<line>": "used to create a line connecting two points",
            "<path>": "All the basic shapes can be created with a path element",
            "<polygon>": "defines a closed shape consisting of a set of connected straight line segments",
            "<polyline>": "creates straight lines connecting several points",
            "<rect>": "defined by their position, width, and height",
            "<image>": "include images in SVG documents",
            "<use>": "takes nodes from within the SVG document"
        }
    },

    "Text content": {
        "Elements": {
            "<text>": "draws a graphics element consisting of text",
            "<tspan>": "define a subtext within a \"<text>\" element or another \"<tspan>\" element",
            "<textPath>": "To render text along the shape of a \"<path>\", enclose the text in a \"<textPath>\" element that has an href attribute with a reference to the \"<path>\" element"
        }
    },

    "Container": {
        "Elements": {
            "<a>": "creates a hyperlink to other web pages",
            "<defs>": "used to store graphical objects that will be used at a later time",
            "<g>": "container used to group other SVG elements",
            "<marker>": "defines the graphic that is to be used for drawing arrowheads or polymarkers on a given \"<path>\", \"<line>\", \"<polyline>\" or \"<polygon>\" element",
            "<mask>": "defines an alpha mask for compositing the current object into the background",
            "<pattern>": "defines a graphics object which can be redrawn at repeated x and y-coordinate intervals (\"tiled\") to cover an area",
            "<svg>": "container that defines a new coordinate system and viewport",
            "<switch>": "evaluates any requiredFeatures, requiredExtensions and systemLanguage attributes on its direct child elements in order, and then renders the first child where these attributes evaluate to true",
            "<symbol>": "used to define graphical template objects which can be instantiated by a \"<use>\" element"
        }
    },

    "Descriptive": {
        "Elements": {
            "<desc>": "provides an accessible, long-text description of any SVG container element or graphics element",
            "<metadata>": "adds metadata to SVG content",
            "<title>": "provides an accessible, short-text description of any SVG container element or graphics element"
        }
    },

    "Animation": {
        "Elements": {
            "<animate>": "used to animate an attribute or property of an element over time",
            "<animateMotion>": "causes a referenced element to move along a motion path",
            "<animateTransform>": "animates a transformation attribute on its target element, thereby allowing animations to control translation, scaling, rotation, and/or skewing",
            "<discard>": "The author can specify the time to delete a particular element, reducing the resources required by the SVG user agent",
            "<mpath>": "sub-element for the \"<animateMotion>\" element provides the ability to reference an external \"<path>\" element as the definition of a motion path",
            "<set>": "provides a simple means of just setting the value of an attribute for a specified duration"
        }
    },

    "Filter primitive": {
        "Elements": {
            "<feBlend>": "composes two objects together ruled by a certain blending mode",
            "<feColorMatrix>": "changes colors based on a transformation matrix",
            "<feComponentTransfer>": "performs color-component-wise remapping of data for each pixel",
            "<feComposite>": "performs the combination of two input images pixel-wise in image space using one of the Porter-Duff compositing operations: over, in, atop, out, xor, and lighter",
            "<feConvolveMatrix>": "applies a matrix convolution filter effect",
            "<feDiffuseLighting>": "lights an image using the alpha channel as a bump map",
            "<feDisplacementMap>": "uses the pixel values from the image from in2 to spatially displace the image from in",
            "<feDropShadow>": "creates a drop shadow of the input image",
            "<feFlood>": "fills the filter subregion with the color and opacity defined by flood-color and flood-opacity",
            "<feFuncA>": "defines the transfer function for the alpha component of the input graphic of its parent \"<feComponentTransfer>\" element",
            "<feFuncB>": "the transfer function for the blue component of the input graphic of its parent \"<feComponentTransfer>\" element",
            "<feFuncG>": "defines the transfer function for the green component of the input graphic of its parent \"<feComponentTransfer>\" element",
            "<feFuncR>": "defines the transfer function for the red component of the input graphic of its parent \"<feComponentTransfer>\" element",
            "<feGaussianBlur>": "blurs the input image by the amount specified in stdDeviation, which defines the bell-curve",
            "<feImage>": "fetches image data from an external source and provides the pixel data as output",
            "<feMerge>": "allows filter effects to be applied concurrently instead of sequentially",
            "<feMergeNode>": "Causes the parent <feMerge> to process the results of another filter",
            "<feMorphology>": "used to erode or dilate the input image",
            "<feOffset>": "allows to offset the input image",
            "<feSpecularLighting>": "lights a source graphic using the alpha channel as a bump map",
            "<feTile>": "allows to fill a target rectangle with a repeated, tiled pattern of an input image",
            "<feTurbulence>": "creates an image using the Perlin turbulence function"
        }
    },

    "Gradient": {
        "Elements": {
            "<linearGradient>": "lets authors define linear gradients that can be applied to fill or stroke of graphical elements",
            "<radialGradient>": "lets authors define radial gradients that can be applied to fill or stroke of graphical elements",
            "<stop>": "defines a color and its position to use on a gradient"
        }
    },

    "Light source": {
        "Elements": {
            "<feDistantLight>": "defines a distant light source that can be used within a lighting filter",
            "<fePointLight>": "defines a light source which allows to create a point light effect",
            "<feSpotLight>": "defines a light source which allows to create a spotlight effect"
        }
    },

    "__PAGE__": "JavaScript",
    "Core DOM": {
        "Nodelist Properties": {
            "length": "Returns the number of nodes in the collection"
        },
        "Nodelist Methods": {
            "item()": "Returns the node at the specified index in a node list"
        },
        "NamedNodeMap Properties": {
            "length": "Returns the number of nodes in the collection"
        },
        "NamedNodeMap Methods": {
            "getNamedItem()": "Returns the specified node (by name)",
            "getNamedItemNS()": "Returns the specified node (by name and namespace)",
            "item()": "Returns the node at the specified index in the namedNodeMap",
            "removeNamedItem()": "Removes the specified node (by name)",
            "removeNamedItemNS()": "Removes the specified node (by name and namespace)",
            "setNamedItem()": "Sets the specified node (by name)",
            "setNamedItemNS()": "Sets the specified node (by name and namespace)"
        },
        "Document Properties": {
            "doctype": "Returns the Document Type Declaration associated with the document",
            "documentElement": "Returns the Document Element of the document (the HTML element)",
            "documentURI": "Sets or returns the location of the document",
            "domConfig": "Returns the configuration used when normalizeDocument() is invoked",
            "implementation": "Returns the DOMImplementation object that handles this document",
            "inputEncoding": "Returns the encoding, character set, used for the document"
        },
        "Document Methods": {
            "adoptNode(node)": "Adopts a node from another document to this document. Returns the adopted node",
            "createAttribute()": "Creates an attribute node",
            "createAttributeNS(URI,name)": "Creates an attribute with the specified name and namspaceURI",
            "createCDATASection()": "Creates a CDATA node with the specified text. For XML DOM only",
            "createComment()": "Creates a Comment node with the specified text",
            "createDocumentFragment()": "Creates an empty DocumentFragment node",
            "createElement()": "Creates an Element node",
            "createElementNS()": "Creates an element with the specified namespace",
            "createEntityReference()": "Creates an EntityReference node. For XML DOM only",
            "createProcessingInstruction()": "Creates an EntityReference node. For XML DOM only",
            "createTextNode()": "Creates a Text node",
            "getElementById()": "Returns the element that has the ID attribute with the specified value",
            "getElementsByTagName()": "Returns a NodeList containing all elements with the specified tagname",
            "getElementsByName()": "Returns a list of elements with a given name in the (X)HTML document",
            "querySelectorAll()": "Returns a NodeList containing all elements that match the specified CSS selector",
            "querySelector()": "Returns the first element matching the specified CSS selector",
            "getElementsByTagNameNS()": "Returns a NodeList containing all elements with the specified namespaceURI and tagname",
            "importNode()": "Imports a node from another document",
            "normalizeDocument()": "Removes empty Text nodes, and joins adjacent nodes"
        },
        "Element Properties": {
            "schemaTypeInfo": "Returns the type information of the element",
            "tagName": "Returns the tag name of the element"
        },
        "Element Methods": {
            "getAttribute()": "Returns the value of the specified property",
            "getAttributeNS()": "Returns the value of the specified property with the specified namespace. XML DOM only",
            "getAttributeNode()": "Returns the specified property node",
            "getAttributeNodeNS()": "Returns the specified property node with the specified namespace. XML DOM only",
            "getElementsByTagName()": "Returns a collection of all child elements with the specified tagname",
            "getElementsByTagNameNS()": "Returns a collection of all child elements with the specified tag name and namespace. XML DOM only",
            "hasAttribute()": "Returns true if the element has the specified attribute, false otherwise.",
            "hasAttributeNS()": "Returns true if the element has the specified attribute along with the specified namespace, false otherwise. XML DOM only",
            "removeAttribute()": "Remove specified attribute",
            "removeAttributeNS()": "Remove the attribute with the specified name and namespace. XML DOM only",
            "removeAttributeNode()": "Removes the specified attribute node and returns the removed node",
            "setAttribute()": "Sets or changes the specified attribute to the specified value",
            "setAttributeNS()": "Sets or changes the specified property to the specified value using the specified namespace. XML DOM only",
            "setAttributeNode()": "Sets or changes the specified attribute node",
            "setAttributeNodeNS()": "Sets or changes the specified attribute node. XML DOM only"
        },
        "Attr Properties": {
            "isId": "Return",
            "name": "Returns the name of the attribute",
            "ownerElement": "Returns the element this attribute belongs to",
            "schemaTypeInfo": "Returns the type information of the attribute",
            "specified": "Returns",
            "value": "Sets or returns the value of the attribute"
        }
    },

    "Basic Objects": {
        "Array Properties": {
            "constructor": "Returns the function that created the Array object's prototype",
            "length": "Sets or returns the number of elements in an array",
            "prototype": "Allows you to add properties and methods to an Array object"
        },
        "Array Methods": {
            "concat()": "Joins two or more arrays, and returns a copy of the joined arrays",
            "indexOf()": "Search the array for an element and returns it's position",
            "join()": "Joins all elements of an array into a string",
            "lastIndexOf()": "Search the array for an element, starting at the end, and returns it's position",
            "pop()": "Removes the last element of an array, and returns that element",
            "push()": "Adds new elements to the end of an array, and returns the new length",
            "reverse()": "Reverses the order of the elements in an array",
            "shift()": "Removes the first element of an array, and returns that element",
            "slice()": "Selects a part of an array, and returns the new array",
            "sort()": "Sorts the elements of an array",
            "splice()": "Adds/Removes elements from an array",
            "toString()": "Converts an array to a string, and returns the result",
            "unshift()": "Adds new elements to the beginning of an array, and returns the new length",
            "valueOf()": "Returns the primitive value of an array"
        },
        "Boolean Properties": {
            "constructor": "Returns the function that created the Boolean object's prototype",
            "prototype": "Allows you to add properties and methods to a Boolean object"
        },
        "Boolean Methods": {
            "toString()": "Converts a Boolean value to a string, and returns the result",
            "valueOf()": "Returns the primitive value of a Boolean object"
        },
        "Math Properties": {
            "E": "Returns Euler's number (approx. 2.718)",
            "LN2": "Returns the natural logarithm of 2 (approx. 0.693)",
            "LN10": "Returns the natural logarithm of 10 (approx. 2.302)",
            "LOG2E": "Returns the base-2 logarithm of E (approx. 1.442)",
            "LOG10E": "Returns the base-10 logarithm of E (approx. 0.434)",
            "PI": "Returns PI (approx. 3.14)",
            "SQRT1_2": "Returns the square root of 1/2 (approx. 0.707)",
            "SQRT2": "Returns the square root of 2 (approx. 1.414)"
        },
        "Math Methods": {
            "abs()": "Returns the absolute value of x",
            "acos()": "Returns the arccosine of x, in radians",
            "asin()": "Returns the arcsine of x, in radians",
            "atan()": "Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radian",
            "atan2()": "Returns the arctangent of the quotient of its arguments",
            "ceil()": "Returns x, rounded upwards to the nearest integer",
            "cos()": "Returns the cosine of x (x is in radians)",
            "exp()": "Returns the value of Ex",
            "floor()": "Returns x, rounded downwards to the nearest integer",
            "log()": "Returns the natural logarithm (base E) of x",
            "max()": "Returns the number with the highest value",
            "min()": "Returns the number with the lowest value",
            "pow()": "Returns the value of x to the power of y",
            "random()": "Returns a random number between 0 and 1",
            "round()": "Rounds x to the nearest integer",
            "sin()": "Returns the sine of x (x is in radians)",
            "sqrt()": "Returns the square root of x",
            "tan()": "Returns the tangent of an angle"
        },
        "Number Properties": {
            "constructor": "Returns the function that created the Number object's prototype",
            "MAX_VALUE": "Returns the largest number possible in JavaScript",
            "MIN_VALUE": "Returns the smallest number possible in JavaScript",
            "NEGATIVE_INFINITY": "Represents negative infinity (returned on overflow)",
            "POSITIVE_INFINITY": "Represents infinity (returned on overflow)",
            "prototype": "Allows you to add properties and methods to an object"
        },
        "Number Methods": {
            "toExponential(x)": "Converts a number into an exponential notation",
            "toFixed(x)": "Formats a number with x numbers of digits after the decimal point",
            "toPrecision(x)": "Formats a number to x length",
            "toString()": "Converts a Number object to a string",
            "valueOf()": "Returns the primitive value of a Number object"
        },
        "String Properties": {
            "constructor": "Returns the function that created the String object's prototype",
            "length": "Returns the length of a string",
            "prototype": "Allows you to add properties and methods to an object"
        },
        "String Methods": {
            "charAt()": "Returns the character at the specified index",
            "charCodeAt()": "Returns the Unicode of the character at the specified index",
            "concat()": "Joins two or more strings, and returns a copy of the joined strings",
            "fromCharCode()": "Converts Unicode values to characters",
            "indexOf()": "Returns the position of the first found occurrence of a specified value in a string",
            "lastIndexOf()": "Returns the position of the last found occurrence of a specified value in a string",
            "match()": "Searches for a match between a regular expression and a string, and returns the matches",
            "replace()": "Searches for a match between a substring (or regular expression) and a string, and replaces the matched substring with a new substring",
            "search()": "Searches for a match between a regular expression and a string, and returns the position of the match",
            "slice()": "Extracts a part of a string and returns a new string",
            "split()": "Splits a string into an array of substrings",
            "substr()": "Extracts the characters from a string, beginning at a specified start position, and through the specified number of character",
            "substring()": "Extracts the characters from a string, between two specified indices",
            "toLowerCase()": "Converts a string to lowercase letters",
            "toUpperCase()": "Converts a string to uppercase letters",
            "valueOf()": "Returns the primitive value of a String object"
        },
        "Global Properties": {
            "InfinityInfinity": "A numeric value that represents positive/negative infinity",
            "NaN": "\"Not-a-Number\" value",
            "undefined": "Indicates that a variable has not been assigned a value"
        },
        "Global Methods": {
            "decodeURI()": "Decodes a URI",
            "decodeURIComponent()": "Decodes a URI component",
            "encodeURI()": "Encodes a URI",
            "encodeURIComponent()": "Encodes a URI component",
            "escape()": "Encodes a string",
            "eval()": "Evaluates a string and executes it as if it was script code",
            "isFinite()": "Determines whether a value is a finite, legal number",
            "isNaN()": "Determines whether a value is an illegal number",
            "Number()": "Converts an object's value to a number",
            "parseFloat()": "Parses a string and returns a floating point number",
            "parseInt()": "Parses a string and returns an integer",
            "String()": "Converts an object's value to a string",
            "unescape()": "Decodes an encoded string"
        }
    },

    "Date Object": {
        "Date Properties": {
            "constructor": "Returns the function that created the Date object's prototype",
            "prototype": "Allows you to add properties and methods to an object"
        },
        "Date Methods": {
            "getDate()": "Returns the day of the month (from 1-31)",
            "getDay()": "Returns the day of the week (from 0-6)",
            "getFullYear()": "Returns the year (four digits)",
            "getHours()": "Returns the hour (from 0-23)",
            "getMilliseconds()": "Returns the milliseconds (from 0-999)",
            "getMinutes()": "Returns the minutes (from 0-59)",
            "getMonth()": "Returns the month (from 0-11)",
            "getSeconds()": "Returns the seconds (from 0-59)",
            "getTime()": "Returns the number of milliseconds since midnight Jan 1, 1970",
            "getTimezoneOffset()": "Returns the time difference between GMT and local time, in minutes",
            "getUTCDate()": "Returns the day of the month, according to universal time (from 1-31)",
            "getUTCDay()": "Returns the day of the week, according to universal time (from 0-6)",
            "getUTCFullYear()": "Returns the year, according to universal time (four digits)",
            "getUTCHours()": "Returns the hour, according to universal time (from 0-23)",
            "getUTCMilliseconds()": "Returns the milliseconds, according to universal time (from 0-999)",
            "getUTCMinutes()": "Returns the minutes, according to universal time (from 0-59)",
            "getUTCMonth()": "Returns the month, according to universal time (from 0-11)",
            "getUTCSeconds()": "Returns the seconds, according to universal time (from 0-59)",
            "parse()": "Parses a date string and returns the number of milliseconds since midnight of January 1, 1970",
            "setDate()": "Sets the day of the month of a date object",
            "setFullYear()": "Sets the year (four digits) of a date object",
            "setHours()": "Sets the hour of a date object",
            "setMilliseconds()": "Sets the milliseconds of a date object",
            "setMinutes()": "Set the minutes of a date object",
            "setMonth()": "Sets the month of a date object",
            "setSeconds()": "Sets the seconds of a date object",
            "setTime()": "Sets a date and time by adding or subtracting a specified number of milliseconds to/from midnight January 1, 1970",
            "setUTCDate()": "Sets the day of the month of a date object, according to universal time",
            "setUTCFullYear()": "Sets the year of a date object, according to universal time (four digits)",
            "setUTCHours()": "Sets the hour of a date object, according to universal time",
            "setUTCMilliseconds()": "Sets the milliseconds of a date object, according to universal time",
            "setUTCMinutes()": "Set the minutes of a date object, according to universal time",
            "setUTCMonth()": "Sets the month of a date object, according to universal time",
            "setUTCSeconds()": "Set the seconds of a date object, according to universal time",
            "toDateString()": "Converts the date portion of a Date object into a readable string",
            "toISOString()": "Returns the date as a string, using the ISO standard",
            "toJSON()": "Returns the date as a string, formated as a JSON date",
            "toLocaleDateString()": "Returns the date portion of a Date object as a string, using locale conventions",
            "toLocaleTimeString()": "Returns the time portion of a Date object as a string, using locale conventions",
            "toLocaleString()": "Converts a Date object to a string, using locale conventions",
            "toString()": "Converts a Date object to a string",
            "toTimeString()": "Converts the time portion of a Date object to a string",
            "toUTCString()": "Converts a Date object to a string, according to universal time",
            "UTC()": "Returns the number of milliseconds in a date string since midnight of January 1, 1970, according to universal time",
            "valueOf()": "Returns the primitive value of a Date object"
        }
    },

    "Browser": {
        "Window Properties": {
            "closed": "Returns a Boolean value indicating whether a window has been closed or not",
            "defaultStatus": "Sets or returns the default text in the statusbar of a window",
            "document": "Returns the Document object for the window",
            "frames": "Returns an array of all the frames (including iframes) in the current window",
            "history": "Returns the History object for the window",
            "innerHeight": "Sets or returns the inner height of a window's content area",
            "innerWidth": "Sets or returns the inner width of a window's content area",
            "length": "Returns the number of frames (including iframes) in a window",
            "location": "Returns the Location object for the window",
            "name": "Sets or returns the name of a window",
            "navigator": "Returns the Navigator object for the window",
            "opener": "Returns a reference to the window that created the window",
            "outerHeight": "Sets or returns the outer height of a window, including toolbars/scrollbars",
            "outerWidth": "Sets or returns the outer width of a window, including toolbars/scrollbars",
            "pageXOffset": "Returns the pixels the current document has been scrolled (horizontally) from the upper left corner of the window",
            "pageYOffset": "Returns the pixels the current document has been scrolled (vertically) from the upper left corner of the window",
            "parent": "Returns the parent window of the current window",
            "screen": "Returns the Screen object for the window",
            "screenLeft": "Returns the x coordinate of the window relative to the screen",
            "screenTop": "Returns the y coordinate of the window relative to the screen",
            "screenX": "Returns the x coordinate of the window relative to the screen",
            "screenY": "Returns the y coordinate of the window relative to the screen",
            "self": "Returns the current window",
            "status": "Sets the text in the statusbar of a window",
            "top": "Returns the topmost browser window"
        },
        "Window Methods": {
            "alert()": "Display warning box with message and ok button",
            "blur()": "Remove focus from current window",
            "clearInterval()": "Clear timer set with setInterval()",
            "clearTimeout()": "Clear timer set with setTimeout()",
            "close()": "Close the current window",
            "confirm()": "Displays a dialog box with a message and OK and Cancel buttons",
            "focus()": "Set focus to current window",
            "moveBy()": "Move window based on current location",
            "moveTo()": "Move the window to a specified location",
            "open()": "Open a new browser window",
            "print()": "Print the contents of the current window",
            "prompt()": "Displays a dialog box asking the user for input",
            "resizeBy()": "Resize window window to specified pixel",
            "resizeTo()": "window Adjust the window to the specified width and height.",
            "scrollBy()": "Scroll content by the specified number of pixels",
            "scrollTo()": "Scroll content to specified coordinates",
            "setInterval()": "Call a function or evaluate an expression at specified intervals (milliseconds)",
            "setTimeout()": "Call function or evaluate expression after specified milliseconds"
        },
        "Navigator Properties": {
            "appCodeName": "Returns the browser's code name",
            "appName": "Returns the browser's name",
            "appVersion": "Returns the browser version information",
            "cookieEnabled": "Make sure cookies are enabled in your browser",
            "platform": "Return to platform where browser is compiled",
            "userAgent": "Returns the user agent header sent by the browser to the server"
        },
        "Navigator Methods": {
            "javaEnabled()": "Specifies whether Java is enabled for the browser",
            "registerProtocolHandler()": "Register as a possible handler for a specific protocol"
        },
        "Screen Properties": {
            "availWidth": "Returns the screen width (except the Windows taskbar)",
            "availHeight": "Returns screen height (except Windows taskbar)",
            "colorDepth": "Returns the bit depth of the color table for displaying images",
            "height": "Returns the total height of the screen",
            "pixelDepth": "Returns the color resolution of the screen (bits per pixel)",
            "width": "Returns the total width of the screen"
        },
        "History Properties": {
            "length": "https://developer.mozilla.org/en-US/docs/DOM/window.history",            "length": "Returns the number of URLs in the history list"
        },
        "History Methods": {
            "back()": "Loading the old URL from the history list",
            "forward()": "Load the following URL from the history list",
            "go()": "Load a specific URL from the history list"
        },
        "Location Properties": {
            "hash": "Return the anchor part of the URL",
            "host": "Return the host name and port of the URL",
            "hostname": "Returns the host name of the URL",
            "href": "Return full URL",
            "pathname": "Returns the path name of the URL",
            "port": "Returns the port number used by the server in the URL",
            "protocol": "Return the protocol of the URL",
            "search": "Returns the query part of the URL"
        },
        "Location Methods": {
            "assign()": "Load new document",
            "reload()": "Refresh the current document",
            "replace()": "Replace current document with new document"
        }
    },

    "Graphics": {
        "CanvasRenderingContext2D Methods": {
            "arc()": "Adds an arc to the path which it center is at (x, y) position with radius r starting at startAngle and ending at endAngle going in the given direction by anticlockwise (defaulting to clockwise)",
            "arcTo()": "Adds an arc with the given control points and radius, connected to the previous point by a straight line",
            "beginPath()": "Starts a new path by resetting the list of sub-paths. Call this method when you want to create a new path",
            "bezierCurveTo()": "void bezierCurveTo (in float cp1x, in float cp1y, in float cp2x, in float cp2y, in float x, in float y)",
            "clearRect()": "Clears the rectangle defined by it starting point at (x, y) and has a w width and a h height",
            "clip()": "Creates a clipping path from the current sub-paths. Everything drawn after clip() is called appears inside the clipping path only. For an example, see Clipping paths in the Canvas tutorial",
            "closePath()": "Tries to draw a straight line from the current point to the start. If the shape has already been closed or has only one point, this function does nothing",
            "createImageData()": "Creates a new, blank ImageData object with the specified dimensions. All of the pixels in the new object are transparent black",
            "createLinearGradient()": "nsIDOMCanvasGradient createLinearGradient (in float x0, in float y0, in float x1, in float y1)",
            "createPattern()": "nsIDOMCanvasPattern createPattern (in nsIDOMHTMLElement image, in DOMString repetition)",
            "createRadialGradient()": "nsIDOMCanvasGradient createRadialGradient (in float x0, in float y0, in float r0, in float x1, in float y1, in float r1)",
            "drawCustomFocusRing()": "boolean drawCustomFocusRing(Element element)",
            "drawImage()": "Draws the specified image. This method is available in multiple formats, providing a great deal of flexibility in its use",
            "drawSystemFocusRing()": "void drawSystemFocusRing(Element element)",
            "fill()": "Fills the subpaths with the current fill style",
            "fillRect()": "Draws a filled rectangle at (x, y) position whose size is determined by width and height",
            "fillText()": "void fillText (in DOMString text, in float x, in float y, in float maxWidth [optional])",
            "getImageData()": "Returns an ImageData object representing the underlying pixel data for the area of the canvas denoted by the rectangle which starts at (sx, sy) and has a sw width and sh height",
            "getLineDash()": "Returns an dash list array containing an even number of non-negative numbers",
            "isPointInPath()": "Reports whether or not the specified point is contained in the current path",
            "lineTo()": "Connects the last point in the subpath to the x, y coordinates with a straight line",
            "measureText()": "nsIDOMTextMetrics measureText (in DOMString text)",
            "moveTomoveTo()": "Moves the starting point of a new subpath to the (x, y) coordinates",
            "putImageData()": "void putImageData (in long x, in long y, in unsigned long width, in unsigned long height, [array, size_is(dataLen)] in octet dataPtr, in unsigned long dataLen, in boolean hasDirtyRect, in long dirtyX, [optional] in long dirtyY, [optional] in long dirtyWidth, [optional] in long dirtyHeight [optional])",
            "quadraticCurveTo()": "void quadraticCurveTo (in float cpx, in float cpy, in float x, in float y)",
            "rect()": "void rect (in float x, in float y, in float w, in float h)",
            "restore()": "Restores the drawing style state to the last element on the 'state stack' saved by save()",
            "rotate()": "void rotate (in float angle)",
            "save()": "Saves the current drawing style state using a stack so you can revert any change you make to it using restore()",
            "scale()": "void scale (in float x, in float y)",
            "scrollPathIntoView()": "void scrollPathIntoView()",
            "setLineDash()": "void setLineDash (sequence segments)",
            "setTransform()": "void setTransform (in float m11, in float m12, in float m21, in float m22, in float dx, in float dy)",
            "stroke()": "Strokes the subpaths with the current stroke style",
            "strokeRect()": "Paints a rectangle which it starting point is at (x, y) and has a w width and a h height onto the canvas, using the current stroke style",
            "strokeText()": "void strokeText (in DOMString text, in float x, in float y, in float maxWidth [optional])",
            "transform()": "void transform (in float m11, in float m12, in float m21, in float m22, in float dx, in float dy)",
            "translate()": "Moves the origin point of the context to (x, y)"
        }
    },

    "RegExp": {
        "Modifiers": {
            "i": "Perform case-insensitive matching",
            "g": "Perform a global match (find all matches rather than stopping after the first match)",
            "m": "Perform multiline matching"
        },
        "Brackets": {
            "{{abc}}": "Find any character between the brackets",
            "{{^abc}}": "Find any character not between the brackets",
            "{{0-9}}": "Find any digit from 0 to 9",
            "{{A-Z}}": "Find any character from uppercase A to uppercase Z",
            "{{a-z}}": "Find any character from lowercase a to lowercase z",
            "{{A-z}}": "Find any character from uppercase A to lowercase z",
            "{{adgk}}": "Find any character in the given set",
            "{{^adgk}}": "Find any character outside the given set",
            "(red|blue|green)": "Find any of the alternatives specified"
        },
        "Metacharacters": {
            "{{dot}}": "Find a single character, except newline or line terminator",
            "\\w": "Find a word character",
            "\\W": "Find a non-word character",
            "\\d": "Find a digit",
            "\\D": "Find a non-digit character",
            "\\s": "Find a whitespace character",
            "\\S": "Find a non-whitespace character",
            "\\b": "Find a match at the beginning/end of a word",
            "\\B": "Find a match not at the beginning/end of a word",
            "\\0": "Find a NUL character",
            "\\n": "Find a new line character",
            "\\f": "Find a form feed character",
            "\\r": "Find a carriage return character",
            "\\t": "Find a tab character",
            "\\v": "Find a vertical tab character",
            "\\xxx": "Find the character specified by an octal number xxx",
            "\\xdd": "Find the character specified by a hexadecimal number dd",
            "\\uxxxx": "Find the Unicode character specified by a hexadecimal number xxxx"
        },
        "Quantifiers": {
            "n+": "Matches any string that contains at least one n",
            "n*": "Matches any string that contains zero or more occurrences of n",
            "n?": "Matches any string that contains zero or one occurrences of n",
            "n{X}": "Matches any string that contains a sequence of X n's",
            "n{X,Y}": "Matches any string that contains a sequence of X to Y n's",
            "n{X,}": "Matches any string that contains a sequence of at least X n's",
            "n$": "Matches any string with n at the end of it",
            "^n": "Matches any string with n at the beginning of it",
            "?=n": "Matches any string that is followed by a specific string n",
            "?!n": "Matches any string that is not followed by a specific string n"
        },
        "RegExp Properties": {
            "global": "Specifies if the \"g\" modifier is set",
            "ignoreCase": "Specifies if the \"i\" modifier is set",
            "lastIndex": "The index at which to start the next match",
            "multiline": "Specifies if the \"m\" modifier is set",
            "source": "The text of the RegExp pattern"
        },
        "RegExp Methods": {
            "exec()": "Tests for a match in a string. Returns the first match",
            "test()": "Tests for a match in a string. Returns true or false"
        }
    },

    "__PAGE__": "jQuery",
    "Selectors": {
        "Attribute": {
            "{{name|=value}}": "Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-).",
            "{{name*=value}}": "Selects elements that have the specified attribute with a value containing the a given substring.",
            "{{name~=value}}": "Selects elements that have the specified attribute with a value containing a given word, delimited by spaces.",
            "{{name$=value}}": "Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive.",
            "{{name=value}}": "Selects elements that have the specified attribute with a value exactly equal to a certain value.",
            "{{name!=value}}": "Select elements that either don't have the specified attribute, or do have the specified attribute but not with a certain value.",
            "{{name^=value}}": "Selects elements that have the specified attribute with a value beginning exactly with a given string.",
            "{{name}}": "Selects elements that have the specified attribute, with any value.",
            "{{name=value}}{{name2=value2}}": "Matches elements that match all of the specified attribute filters."
        },
        "Forms": {
            ":button": "Selects all button elements and elements of type button.",
            ":checkbox": "Selects all elements of type checkbox.",
            ":checked": "Matches all elements that are checked.",
            ":disabled": "Selects all elements that are disabled.",
            ":enabled": "Selects all elements that are enabled.",
            ":focus": "Selects element if it is currently focused.",
            ":file": "Selects all elements of type file.",
            ":image": "Selects all elements of type image.",
            ":input": "Selects all input, textarea, select and button elements.",
            ":password": "Selects all elements of type password.",
            ":radio": "Selects all elements of type radio.",
            ":reset": "Selects all elements of type reset.",
            ":selected": "Selects all elements that are selected.",
            ":submit": "Selects all elements of type submit.",
            ":text": "Selects all elements of type text."
        },
        "Basics": {
            "*": "Selects all elements.",
            "{{class}}": "Selects all elements with the given class.",
            "element": "Selects all elements with the given tag name.",
            "#id": "Selects a single element with the given id attribute.",
            "{{selectorN}}": "Selects the combined results of all the specified selectors."
        },
        "Visibility Filters": {
            ":hidden": "Selects all elements that are hidden.",
            ":visible": "Selects all elements that are visible"
        },
        "Basic Filters": {
            ":animated": "Select all elements that are in the progress of an animation at the time the selector is run.",
            ":eq()": "Select the element at index n within the matched set.",
            ":even": "Selects even elements, zero-indexed. See also odd.",
            ":first": "Selects the first matched element.",
            ":gt()": "Select all elements at an index greater than index within the matched set.",
            ":header": "Selects all elements that are headers, like h1, h2, h3 and so on.",
            ":last": "Selects the last matched element.",
            ":lt()": "Select all elements at an index less than index within the matched set.",
            ":not()": "Selects all elements that do not match the given selector.",
            ":odd": "Selects odd elements, zero-indexed. See also even."
        },
        "Child Filters": {
            ":first-child": "Selects all elements that are the first child of their parent.",
            ":last-child": "Selects all elements that are the last child of their parent.",
            ":nth-child()": "Selects all elements that are the nth-child of their parent.",
            ":only-child": "Selects all elements that are the only child of their parent."
        },
        "Content Filters": {
            ":contains()": "Select all elements that contain the specified text.",
            ":empty": "Select all elements that have no children (including text nodes).",
            ":has()": "Selects elements which contain at least one element that matches the specified selector.",
            ":parent": "Select all elements that are the parent of another element, including text nodes."
        },
        "Hierarchy": {
            "parent > child": "Selects all direct child elements specified by 'child' of elements specified by 'parent'.",
            "ancestor descendant": "Selects all elements that are descendants of a given ancestor.",
            "prev + next": "Selects all next elements matching 'next' that are immediately preceded by a sibling 'prev'.",
            "prev ~ siblings": "Selects all sibling elements that follow after the 'prev' element, have the same parent, and match the filtering 'siblings' selector."
        }
    },

    "Attributes / CSS": {
        "Attributes": {
            "{{attr()}}": "Get the value of an attribute for the first element in the set of matched elements.",
            "{{prop()}}": "Get the value of a property for the first element in the set of matched elements.",
            "{{removeAttr()}}": "Remove an attribute from each element in the set of matched elements.",
            "{{removeProp()}}": "Remove a property for the set of matched elements.",
            "{{val()}}": "Get the current value of the first element in the set of matched elements."
        },
        "CSS": {
            "{{addClass()}}": "Adds the specified class(es) to each of the set of matched elements.",
            "{{css()}}": "Get the value of a style property for the first element in the set of matched elements.",
            "jQuery.cssHooks": "Provides a way to hook directly into jQuery to override how particular CSS properties are retrieved or set. Amongst other uses, cssHooks can be used to create custom, browser-normalized properties for CSS3 features such as box-shadows and gradients.",
            "{{hasClass()}}": "Determine whether any of the matched elements are assigned the given class.",
            "{{removeClass()}}": "Remove a single class, multiple classes, or all classes from each element in the set of matched elements.",
            "{{toggleClass()}}": "Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument."
        },
        "Dimensions": {
            "{{height()}}": "Get the current computed height for the first element in the set of matched elements.",
            "{{innerHeight()}}": "Get the current computed height for the first element in the set of matched elements, including padding but not border.",
            "{{innerWidth()}}": "Get the current computed width for the first element in the set of matched elements, including padding but not border.",
            "{{outerHeight()}}": "Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin.",
            "{{outerWidth()}}": "Get the current computed width for the first element in the set of matched elements, including padding and border.",
            "{{width()}}": "Get the current computed width for the first element in the set of matched elements."
        },
        "Offset": {
            "{{offset()}}": "Get the current coordinates of the first element in the set of matched elements, relative to the document.",
            "{{offsetParent()}}": "Get the closest ancestor element that is positioned.",
            "{{position()}}": "Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.",
            "{{scrollLeft()}}": "Get the current horizontal position of the scroll bar for the first element in the set of matched elements.",
            "{{scrollTop()}}": "Get the current vertical position of the scroll bar for the first element in the set of matched elements."
        },
        "Data": {
            "jQuery.data()": "Store arbitrary data associated with the specified element.",
            "{{data()}}": "Store arbitrary data associated with the matched elements.",
            "jQuery.hasData()": "Determine whether an element has any jQuery data associated with it.",
            "jQuery.removeData()": "Remove a previously-stored piece of data.",
            "{{removeData()}}": "Remove a previously-stored piece of data."
        }
    },

    "Manipulation": {
        "Copying": {
            "{{clone()}}": "Create a deep copy of the set of matched elements."
        },
        "DOM Insertion, Around": {
            "{{wrap()}}": "Wrap an HTML structure around each element in the set of matched elements.",
            "{{wrapAll()}}": "Wrap an HTML structure around all elements in the set of matched elements.",
            "{{wrapInner()}}": "Wrap an HTML structure around the content of each element in the set of matched elements."
        },
        "DOM Insertion, Inside": {
            "{{append()}}": "Insert content, specified by the parameter, to the end of each element in the set of matched elements.",
            "{{appendTo()}}": "Insert every element in the set of matched elements to the end of the target.",
            "{{html()}}": "Get the HTML contents of the first element in the set of matched elements.",
            "{{prepend()}}": "Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.",
            "{{prependTo()}}": "Insert every element in the set of matched elements to the beginning of the target.",
            "{{text()}}": "Get the combined text contents of each element in the set of matched elements, including their descendants."
        },
        "DOM Insertion, Outside": {
            "{{after()}}": "Insert content, specified by the parameter, after each element in the set of matched elements.",
            "{{before()}}": "Insert content, specified by the parameter, before each element in the set of matched elements.",
            "{{insertAfter()}}": "Insert every element in the set of matched elements after the target.",
            "{{insertBefore()}}": "Insert every element in the set of matched elements before the target."
        },
        "DOM Removal": {
            "{{detach()}}": "Remove the set of matched elements from the DOM.",
            "{{empty()}}": "Remove all child nodes of the set of matched elements from the DOM.",
            "{{remove()}}": "Remove the set of matched elements from the DOM",
            "{{unwrap()}}": "Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place."
        },
        "DOM Replacement": {
            "{{replaceAll()}}": "Replace each target element with the set of matched elements.",
            "{{replaceWith()}}": "Replace each element in the set of matched elements with the provided new content."
        }
    },

    "Traversing": {
        "Filtering": {
            "{{eq()}}": "Reduce the set of matched elements to the one at the specified index.",
            "{{filter()}}": "Reduce the set of matched elements to those that match the selector or pass the function's test.",
            "{{first()}}": "Reduce the set of matched elements to the first in the set.",
            "{{has()}}": "Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.",
            "{{is()}}": "Check the current matched set of elements against a selector and return true if at least one of these elements matches the selector.",
            "{{last()}}": "Reduce the set of matched elements to the final one in the set.",
            "{{map()}}": "Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.",
            "{{not()}}": "Remove elements from the set of matched elements.",
            "{{slice()}}": "Reduce the set of matched elements to a subset specified by a range of indices."
        },
        "Miscellaneous Traversing": {
            "{{add()}}": "Add elements to the set of matched elements.",
            "{{andSelf()}}": "Add the previous set of elements on the stack to the current set.",
            "{{contents()}}": "Get the children of each element in the set of matched elements, including text and comment nodes.",
            "{{end()}}": "End the most recent filtering operation in the current chain and return the set of matched elements to its previous state."
        },
        "Tree Traversal": {
            "{{children()}}": "Get the children of each element in the set of matched elements, optionally filtered by a selector.",
            "{{closest()}}": "Get the first ancestor element that matches the selector, beginning at the current element and progressing up through the DOM tree.",
            "{{find()}}": "Get the descendants of each element in the current set of matched elements, filtered by a selector.",
            "{{next()}}": "Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.",
            "{{nextAll()}}": "Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.",
            "{{nextUntil()}}": "Get all following siblings of each element up to but not including the element matched by the selector.",
            "{{parent()}}": "Get the parent of each element in the current set of matched elements, optionally filtered by a selector.",
            "{{parents()}}": "Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.",
            "{{parentsUntil()}}": "Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector.",
            "{{prev()}}": "Get the immediately preceding sibling of each element in the set of matched elements, optionally filtered by a selector.",
            "{{prevAll()}}": "Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.",
            "{{prevUntil()}}": "Get all preceding siblings of each element up to but not including the element matched by the selector.",
            "{{siblings()}}": "Get the siblings of each element in the set of matched elements, optionally filtered by a selector."
        }
    },

    "Events": {
        "Event Object": {
            "{{event-currentTarget}}": "The current DOM element within the event bubbling phase.",
            "{{event-data}}": "The optional data passed to jQuery.fn.bind when the current executing handler was bound.",
            "{{event-isDefaultPrevented()}}": "Returns whether event.preventDefault() was ever called on this event object.",
            "{{event-isImmediatePropagationStopped()}}": "Returns whether event.stopImmediatePropagation() was ever called on this event object.",
            "{{event-isPropagationStopped()}}": "Returns whether event.stopPropagation() was ever called on this event object.",
            "{{event-namespace}}": "The namespace specified when the event was triggered.",
            "{{event-pageX}}": "The mouse position relative to the left edge of the document.",
            "{{event-pageY}}": "The mouse position relative to the top edge of the document.",
            "{{event-preventDefault()}}": "If this method is called, the default action of the event will not be triggered.",
            "{{event-relatedTarget}}": "The other DOM element involved in the event, if any.",
            "{{event-result}}": "The last value returned by an event handler that was triggered by this event, unless the value was undefined",
            "{{event-stopImmediatePropagation()}}": "Prevents other event handlers from being called.",
            "{{event-stopPropagation()}}": "Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.",
            "{{event-target}}": "The DOM element that initiated the event.",
            "{{event-timeStamp}}": "The difference in milliseconds between the time an event is triggered and January 1, 1970.",
            "{{event-type}}": "Describes the nature of the event.",
            "{{event-which}}": "For key or button events, this attribute indicates the specific button or key that was pressed."
        },
        "Mouse Events": {
            "{{click()}}": "Bind an event handler to the 'click' JavaScript event, or trigger that event on an element.",
            "{{dblclick()}}": "Bind an event handler to the 'dblclick' JavaScript event, or trigger that event on an element.",
            "{{focusin()}}": "Bind an event handler to the 'focusin' JavaScript event.",
            "{{focusout()}}": "Bind an event handler to the 'focusout' JavaScript event.",
            "{{hover()}}": "Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.",
            "{{mousedown()}}": "Bind an event handler to the 'mousedown' JavaScript event, or trigger that event on an element.",
            "{{mouseenter()}}": "Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.",
            "{{mouseleave()}}": "Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.",
            "{{mousemove()}}": "Bind an event handler to the 'mousemove' JavaScript event, or trigger that event on an element.",
            "{{mouseout()}}": "Bind an event handler to the 'mouseout' JavaScript event, or trigger that event on an element.",
            "{{mouseover()}}": "Bind an event handler to the 'mouseover' JavaScript event, or trigger that event on an element.",
            "{{mouseup()}}": "Bind an event handler to the 'mouseup' JavaScript event, or trigger that event on an element.",
            "{{toggle()}}": "Bind two or more handlers to the matched elements, to be executed on alternate clicks."
        },
        "Browser Events": {
            "{{error()}}": "Bind an event handler to the 'error' JavaScript event.",
            "{{resize()}}": "Bind an event handler to the 'resize' JavaScript event, or trigger that event on an element.",
            "{{scroll()}}": "Bind an event handler to the 'scroll' JavaScript event, or trigger that event on an element."
        },
        "Document Loading": {
            "{{holdReady()}}": "Holds or releases the execution of jQuery's ready event.",
            "{{load()}}": "Bind an event handler to the 'load' JavaScript event.",
            "{{ready()}}": "Specify a function to execute when the DOM is fully loaded.",
            "{{unload()}}": "Bind an event handler to the 'unload' JavaScript event."
        },
        "Event Handler Attachment": {
            "{{off()}}": "Remove an event handler.",
            "{{on()}}": "Attach an event handler function for one or more events to the selected elements.",
            "{{one()}}": "Attach a handler to an event for the elements. The handler is executed at most once per element.",
            "{{trigger()}}": "Execute all handlers and behaviors attached to the matched elements for the given event type.",
            "{{triggerHandler()}}": "Execute all handlers attached to an element for an event."
        },
        "Form Events": {
            "{{blur()}}": "Bind an event handler to the 'blur' JavaScript event, or trigger that event on an element.",
            "{{change()}}": "Bind an event handler to the 'change' JavaScript event, or trigger that event on an element.",
            "{{focus()}}": "Bind an event handler to the 'focus' JavaScript event, or trigger that event on an element.",
            "{{select()}}": "Bind an event handler to the 'select' JavaScript event, or trigger that event on an element.",
            "{{submit()}}": "Bind an event handler to the 'submit' JavaScript event, or trigger that event on an element."
        },
        "Keyboard Events": {
            "{{keydown()}}": "Bind an event handler to the 'keydown' JavaScript event, or trigger that event on an element.",
            "{{keypress()}}": "Bind an event handler to the 'keypress' JavaScript event, or trigger that event on an element.",
            "{{keyup()}}": "Bind an event handler to the 'keyup' JavaScript event, or trigger that event on an element."
        }
    },

    "Effects": {
        "Basics": {
            "{{hide()}}": "Hide the matched elements.",
            "{{show()}}": "Display the matched elements.",
            "{{toggle()}}": "Display or hide the matched elements."
        },
        "Custom": {
            "{{animate()}}": "Perform a custom animation of a set of CSS properties.",
            "{{clearQueue()}}": "Remove from the queue all items that have not yet been run.",
            "{{delay()}}": "Set a timer to delay execution of subsequent items in the queue.",
            "{{dequeue()}}": "Execute the next function on the queue for the matched elements.",
            "{{jQuery-dequeue()}}": "Execute the next function on the queue for the matched element.",
            "{{jQuery-fx-interval}}": "The rate (in milliseconds) at which animations fire.",
            "{{jQuery-fx-off}}": "Globally disable all animations.",
            "{{queue()}}": "Show the queue of functions to be executed on the matched elements.",
            "{{jQuery-queue()}}": "Show the queue of functions to be executed on the matched elements.",
            "{{stop()}}": "Stop the currently-running animation on the matched elements."
        },
        "Fading": {
            "{{fadeIn()}}": "Display the matched elements by fading them to opaque.",
            "{{fadeOut()}}": "Hide the matched elements by fading them to transparent.",
            "{{fadeTo()}}": "Adjust the opacity of the matched elements.",
            "{{fadeToggle()}}": "Display or hide the matched elements by animating their opacity."
        },
        "Sliding": {
            "{{slideDown()}}": "Display the matched elements with a sliding motion.",
            "{{slideToggle()}}": "Display or hide the matched elements with a sliding motion.",
            "{{slideUp()}}": "Hide the matched elements with a sliding motion."
        }
    },

    "Ajax": {
        "Global Ajax Event Handlers": {
            "{{ajaxComplete()}}": "Register a handler to be called when Ajax requests complete. This is an Ajax Event.",
            "{{ajaxError()}}": "Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event.",
            "{{ajaxSend()}}": "Attach a function to be executed before an Ajax request is sent. This is an Ajax Event.",
            "{{ajaxStart()}}": "Register a handler to be called when the first Ajax request begins. This is an Ajax Event.",
            "{{ajaxStop()}}": "Register a handler to be called when all Ajax requests have completed. This is an Ajax Event.",
            "{{ajaxSuccess()}}": "Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event."
        },
        "Helper Functions": {
            "{{jQuery-param()}}": "Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.",
            "{{serialize()}}": "Encode a set of form elements as a string for submission.",
            "{{serializeArray()}}": "Encode a set of form elements as an array of names and values."
        },
        "Low-Level Interface": {
            "{{jQuery-ajax()}}": "Perform an asynchronous HTTP (Ajax) request.",
            "{{jQuery-ajaxSetup()}}": "Set default values for future Ajax requests."
        },
        "Shorthand Methods": {
            "{{jQuery-get()}}": "Load data from the server using a HTTP GET request.",
            "{{jQuery-getJSON()}}": "Load JSON-encoded data from the server using a GET HTTP request.",
            "{{jQuery-getScript()}}": "Load a JavaScript file from the server using a GET HTTP request, then execute it.",
            "{{load()}}": "Load data from the server and place the returned HTML into the matched element.",
            "{{jQuery-post()}}": "Load data from the server using a HTTP POST request."
        }
    },

    "Core": {
        "jQuery Object": {
            "jQuery()": "Accepts a string containing a CSS selector which is then used to match a set of elements.",
            "{{jQuery-noConflict()}}": "Relinquish jQuery's control of the $ variable.",
            "{{jQuery-sub()}}": "Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object.",
            "{{jQuery-when()}}": "Provides a way to execute callback functions based on one or more objects, usually Deferred objects that represent asynchronous events."
        },
        "DOM Element Methods": {
            "{{get()}}": "Retrieve the DOM elements matched by the jQuery object.",
            "{{index()}}": "Search for a given element from among the matched elements.",
            "{{size()}}": "Return the number of elements in the jQuery object.",
            "toArray()": "Retrieve all the DOM elements contained in the jQuery set, as an array."
        },
        "Internals": {
            "{{context}}": "The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document.",
            "{{jQuery-error}}": "Takes a string and throws an exception containing it.",
            "{{length}}": "The number of elements in the jQuery object.",
            "{{pushStack()}}": "Add a collection of DOM elements onto the jQuery stack.",
            "{{selector}}": "A selector representing selector originally passed to jQuery()."
        },
        "Deferred Object": {
            "{{deferred-always()}}": "Add handlers to be called when the Deferred object is either resolved or rejected.",
            "{{deferred-done()}}": "Add handlers to be called when the Deferred object is resolved.",
            "{{deferred-fail()}}": "Add handlers to be called when the Deferred object is rejected.",
            "{{deferred-isRejected()}}": "Determine whether a Deferred object has been rejected.",
            "{{deferred-isResolved()}}": "Determine whether a Deferred object has been resolved.",
            "{{deferred-notify()}}": "Call the progressCallbacks on a Deferred object with the given args.",
            "{{deferred-notifyWith()}}": "Call the progressCallbacks on a Deferred object with the given context and args.",
            "{{deferred-pipe()}}": "Utility method to filter and/or chain Deferreds.",
            "{{deferred-progress()}}": "Add handlers to be called when the Deferred object generates progress notifications.",
            "{{deferred-promise()}}": "Return a Deferred's Promise object.",
            "{{deferred-reject()}}": "Reject a Deferred object and call any failCallbacks with the given args.",
            "{{deferred-rejectWith()}}": "Reject a Deferred object and call any failCallbacks with the given context and args.",
            "{{deferred-resolve()}}": "Resolve a Deferred object and call any doneCallbacks with the given args.",
            "{{deferred-resolveWith()}}": "Resolve a Deferred object and call any doneCallbacks with the given context and args.",
            "{{deferred-state()}}": "Determine the current state of a Deferred object.",
            "{{deferred-then()}}": "Add handlers to be called when the Deferred object is resolved or rejected.",
            "{{promise()}}": "Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished."
        },
        "Callbacks Object": {
            "{{jQuery-Callbacks()}}": "A multi-purpose callbacks list object that provides a powerful way to manage callback lists.",
            "{{callbacks-add()}}": "Add a callback or a collection of callbacks to a callback list.",
            "{{callbacks-disable()}}": "Disable a callback list from doing anything more.",
            "{{callbacks-empty()}}": "Remove all of the callbacks from a list.",
            "{{callbacks-fire()}}": "Call all of the callbacks with the given arguments.",
            "{{callbacks-fired()}}": "Determine if the callbacks have already been called at least once.",
            "{{callbacks-fireWith()}}": "Call all callbacks in a list with the given context and arguments.",
            "{{callbacks-has()}}": "Determine whether a supplied callback is in a list.",
            "{{callbacks-lock()}}": "Lock a callback list in its current state.",
            "{{callbacks-locked()}}": "Determine if the callbacks list has been locked.",
            "{{callbacks-remove()}}": "Remove a callback or a collection of callbacks from a callback list."
        }
    },

    "Utilities": {
        "Utilities": {
            "{{jQuery-contains()}}": "Check to see if a DOM node is within another DOM node.",
            "{{each()}}": "Iterate over a jQuery object, executing a function for each matched element.",
            "{{jQuery-each()}}": "A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.",
            "{{jQuery-extend()}}": "Merge the contents of two or more objects together into the first object.",
            "{{jQuery-globalEval()}}": "Execute some JavaScript code globally.",
            "{{jQuery-grep()}}": "Finds the elements of an array which satisfy a filter function. The original array is not affected.",
            "{{jQuery-inArray()}}": "Search for a specified value within an array and return its index (or -1 if not found).",
            "{{jQuery-isArray()}}": "Determine whether the argument is an array.",
            "{{jQuery-isEmptyObject()}}": "Check to see if an object is empty (contains no properties).",
            "{{jQuery-isFunction()}}": "Determine if the argument passed is a Javascript function object.",
            "{{jQuery-isNumeric()}}": "Determines whether its argument is a number.",
            "{{jQuery-isPlainObject()}}": "Check to see if an object is a plain object (created using '{}' or 'new Object').",
            "{{jQuery-isWindow()}}": "Determine whether the argument is a window.",
            "{{jQuery-isXMLDoc()}}": "Check to see if a DOM node is within an XML document (or is an XML document).",
            "{{jQuery-makeArray()}}": "Convert an array-like object into a true JavaScript array.",
            "{{jQuery-map()}}": "Translate all items in an array or array-like object to another array of items.",
            "{{jQuery-merge()}}": "Merge the contents of two arrays together into the first array.",
            "{{jQuery-noop()}}": "An empty function.",
            "{{jQuery-now()}}": "Return a number representing the current time.",
            "{{jQuery-parseJSON()}}": "Takes a well-formed JSON string and returns the resulting JavaScript object.",
            "{{jQuery-parseXML()}}": "Parses a string into an XML document.",
            "{{jQuery-proxy()}}": "Takes a function and returns a new one that will always have a particular context.",
            "{{jQuery-support}}": "A collection of properties that represent the presence of different browser features or bugs.",
            "{{jQuery-trim()}}": "Remove the whitespace from the beginning and end of a string.",
            "{{jQuery-type()}}": "Determine the internal JavaScript [[Class]] of an object.",
            "{{jQuery-unique()}}": "Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers."
        }
    },

    "__PAGE__": "Lodash",
    "Collection": {
        "Collection Functions": {
            "{{_countBy()}}": "Creates an array of elements split into groups the length of size. If array can't be split evenly, the final chunk will be the remaining elements",
            "{{_forEach()}}": "Iterates over elements of collection and invokes iteratee for each element",
            "{{_forEachRight()}}": "This method is like \"_.forEach\" except that it iterates over elements of collection from right to left",
            "{{_every()}}": "Checks if predicate returns truthy for all elements of collection. Iteration is stopped once predicate returns falsey",
            "{{_filter()}}": "Iterates over elements of collection, returning an array of all elements predicate returns truthy for",
            "{{_find()}}": "Iterates over elements of collection, returning the first element predicate returns truthy for",
            "{{_findLast()}}": "This method is like \"_.find\" except that it iterates over elements of collection from right to left",
            "{{_flatMap()}}": "Creates a flattened array of values by running each element in collection thru iteratee and flattening the mapped results",
            "{{_flatMapDeep()}}": "This method is like \"_.flatMap\" except that it recursively flattens the mapped results",
            "{{_flatMapDepth()}}": "This method is like \"_.flatMap\" except that it recursively flattens the mapped results up to depth times",
            "{{_groupBy()}}": "Creates an object composed of keys generated from the results of running each element of collection thru iteratee",
            "{{_includes()}}": "Checks if value is in collection. If collection is a string, it's checked for a substring of value",
            "{{_invokeMap()}}": "Invokes the method at path of each element in collection, returning an array of the results of each invoked method. Any additional arguments are provided to each invoked method",
            "{{_keyBy()}}": "Creates an object composed of keys generated from the results of running each element of collection thru iteratee",
            "{{_map()}}": "Creates an array of values by running each element in collection thru iteratee",
            "{{_orderBy()}}": "This method is like \"_.sortBy\" except that it allows specifying the sort orders of the iteratees to sort by. If orders is unspecified, all values are sorted in ascending order. Otherwise, specify an order of \"desc\" for descending or \"asc\" for ascending sort order of corresponding values",
            "{{_partition()}}": "Creates an array of elements split into two groups, the first of which contains elements predicate returns truthy for, the second of which contains elements predicate returns falsey for",
            "{{_reduce()}}": "Reduces collection to a value which is the accumulated result of running each element in collection thru iteratee, where each successive invocation is supplied the return value of the previous. If accumulator is not given, the first element of collection is used as the initial value",
            "{{_reduceRight()}}": "This method is like \"_.reduce\" except that it iterates over elements of collection from right to left",
            "{{_reject()}}": "The opposite of \"_.filter\" this method returns the elements of collection that predicate does not return truthy for",
            "{{_sample()}}": "Gets a random element from collection",
            "{{_sampleSize()}}": "Gets n random elements at unique keys from collection up to the size of collection",
            "{{_shuffle()}}": "Creates an array of shuffled values",
            "{{_size()}}": "Gets the size of collection by returning its length for array-like values or the number of own enumerable string keyed properties for objects",
            "{{_some()}}": "Checks if predicate returns truthy for any element of collection. Iteration is stopped once predicate returns truthy",
            "{{_sortBy()}}": "Creates an array of elements, sorted in ascending order by the results of running each element in a collection thru each iteratee"
        }
    },

    "Array": {
        "Array Functions": {
            "{{_chunk()}}": "Creates an array of elements split into groups the length of size. If array can't be split evenly, the final chunk will be the remaining elements",
            "{{_compact()}}": "Creates an array with all falsey values removed. The values false, null, 0, \"\", undefined, and NaN are falsey",
            "{{_concat()}}": "Creates a new array concatenating array with any additional arrays and/or values",
            "{{_difference()}}": "Creates an array of array values not included in the other given arrays using \"SameValueZero\" for equality comparisons",
            "{{_differenceBy()}}": "This method is like \"_.difference\" except that it accepts iteratee which is invoked for each element of array and values to generate the criterion by which they're compared",
            "{{_differenceWith()}}": "This method is like \"_.difference\" except that it accepts comparator which is invoked to compare elements of array to values",
            "{{_drop()}}": "Creates a slice of array with n elements dropped from the beginning",
            "{{_dropRight()}}": "Creates a slice of array with n elements dropped from the end",
            "{{_dropRightWhile()}}": "Creates a slice of array excluding elements dropped from the end. Elements are dropped until predicate returns falsey",
            "{{_fill()}}": "Fills elements of array with value from start up to, but not including, end",
            "{{_findIndex()}}": "This method is like \"_.find\" except that it returns the index of the first element predicate returns truthy for instead of the element itself",
            "exceptionValue": "Gets the first element of array",
            "{{_flatten()}}": "Flattens array a single level deep",
            "{{_flattenDeep()}}": "Recursively flattens array",
            "{{_fromPairs()}}": "The inverse of \"_.toPairs\" this method returns an object composed from key-value pairs",
            "{{_indexOf()}}": "Gets the index at which the first occurrence of value is found in array using \"SameValueZero\" for equality comparisons",
            "{{_initial()}}": "Gets all but the last element of array",
            "{{_intersection()}}": "Creates an array of unique values that are included in all given arrays using \"SameValueZero\" for equality comparisons",
            "{{_intersectionBy()}}": "This method is like \"_.intersection\" except that it accepts iteratee which is invoked for each element of each arrays to generate the criterion by which they're compared",
            "{{_intersectionWith()}}": "This method is like \"_.intersection\" except that it accepts comparator which is invoked to compare elements of arrays",
            "{{_join()}}": "Converts all elements in array into a string separated by separator",
            "{{_last()}}": "Gets the last element of array",
            "{{_lastIndexOf()}}": "This method is like \"_.indexOf\" except that it iterates over elements of array from right to left",
            "{{_nth()}}": "Gets the element at index n of array. If n is negative, the nth element from the end is returned",
            "{{_pull()}}": "Removes all given values from array using \"SameValueZero\" for equality comparisons",
            "{{_pullAll()}}": "This method is like \"_.pull\" except that it accepts an array of values to remove",
            "{{_pullAllBy()}}": "This method is like \"_.pullAll\" except that it accepts iteratee which is invoked for each element of array and values to generate the criterion by which they're compared",
            "{{_pullAllWith()}}": "This method is like \"_.pullAll\" except that it accepts comparator which is invoked to compare elements of array to values",
            "{{_pullAt()}}": "Removes elements from array corresponding to indexes and returns an array of removed elements",
            "{{_remove()}}": "Removes all elements from array that predicate returns truthy for and returns an array of the removed elements",
            "{{_reverse()}}": "Reverses array so that the first element becomes the last, the second element becomes the second to last, and so on",
            "{{_slice()}}": "Creates a slice of array from start up to, but not including, end",
            "{{_sortedIndex()}}": "Uses a binary search to determine the lowest index at which value should be inserted into array in order to maintain its sort order",
            "{{_sortedIndexBy()}}": "This method is like \"_.sortedIndex\" except that it accepts iteratee which is invoked for value and each element of array to compute their sort ranking",
            "{{_sortedIndexOf()}}": "This method is like \"_.indexOf\" except that it performs a binary search on a sorted array",
            "{{_sortedLastIndex()}}": "This method is like \"_.sortedIndex\" except that it returns the highest index at which value should be inserted into array in order to maintain its sort order",
            "{{_sortedLastIndexBy()}}": "This method is like \"_.sortedLastIndex\" except that it accepts iteratee which is invoked for value and each element of array to compute their sort ranking",
            "{{_sortedLastIndexOf()}}": "This method is like \"_.lastIndexOf\" except that it performs a binary search on a sorted array",
            "{{_sortedUniq()}}": "This method is like \"_.uniq\" except that it's designed and optimized for sorted arrays",
            "{{_sortedUniqBy()}}": "This method is like \"_.uniqBy\" except that it's designed and optimized for sorted arrays",
            "{{_tail()}}": "Gets all but the first element of array",
            "{{_take()}}": "Creates a slice of array with n elements taken from the beginning",
            "{{_takeRight()}}": "Creates a slice of array with n elements taken from the end",
            "{{_takeRightWhile()}}": "Creates a slice of array with elements taken from the end. Elements are taken until predicate returns falsey",
            "{{_takeWhile()}}": "Creates a slice of array with elements taken from the beginning. Elements are taken until predicate returns falsey",
            "{{_union()}}": "Creates an array of unique values, in order, from all given arrays using \"SameValueZero\" for equality comparisons",
            "{{_unionBy()}}": "This method is like \"_.union\" except that it accepts iteratee which is invoked for each element of each arrays to generate the criterion by which uniqueness is computed",
            "{{_unionWith()}}": "This method is like \"_.union\" except that it accepts comparator which is invoked to compare elements of arrays",
            "{{_uniq()}}": "Creates a duplicate-free version of an array, using \"SameValueZero\" for equality comparisons",
            "{{_uniqBy()}}": "This method is like \"_.uniq\" except that it accepts iteratee which is invoked for each element in array to generate the criterion by which uniqueness is computed",
            "{{_unzip()}}": "This method is like \"_.zip\" except that it accepts an array of grouped elements and creates an array regrouping the elements to their pre-zip configuration",
            "{{_unzipWith()}}": "This method is like \"_.unzip\" except that it accepts iteratee to specify how regrouped values should be combinedThis method is like _.unzip except that it accepts iteratee to specify how regrouped values should be combined",
            "{{_without()}}": "Creates an array excluding all given values using \"SameValueZero\" for equality comparisons",
            "{{_xor()}}": "Creates an array of unique values that is the \"symmetric difference\" of the given arrays",
            "{{_xorBy()}}": "This method is like \"_.xor\" except that it accepts iteratee which is invoked for each element of each arrays to generate the criterion by which by which they're compared",
            "{{_xorWith()}}": "This method is like \"_.xor\" except that it accepts comparator which is invoked to compare elements of arrays",
            "{{_zip()}}": "Creates an array of grouped elements, the first of which contains the first elements of the given arrays, the second of which contains the second elements of the given arrays, and so on",
            "{{_zipObject()}}": "This method is like \"_.fromPairs\" except that it accepts two arrays, one of property identifiers and one of corresponding values",
            "{{_zipObjectDeep()}}": "This method is like \"_.zipObject\" except that it supports property paths",
            "{{_zipWith()}}": "This method is like \"_.zip\" except that it accepts iteratee to specify how grouped values should be combined"
        }
    },

    "Date": {
        "Date Functions": {
            "{{_now()}}": "Gets the timestamp of the number of milliseconds that have elapsed since the Unix epoch (1 January 1970 00:00:00 UTC)"
        }
    },

    "Function": {
        "Function Functions": {
            "{{_after()}}": "The opposite of \"_.before\" this method creates a function that invokes func once it's called n or more times",
            "{{_ary()}}": "Creates a function that invokes func, with up to n arguments, ignoring any additional arguments",
            "{{_before()}}": "Creates a function that invokes func, with the this binding and arguments of the created function, while it's called less than n times. Subsequent calls to the created function return the result of the last func invocation.Creates a function that invokes func, with the this binding and arguments of the created function, while it's called less than n times. Subsequent calls to the created function return the result of the last func invocation.",
            "{{_bind()}}": "Creates a function that invokes func with the this binding of thisArg and partials prepended to the arguments it receives",
            "{{_bindKey()}}": "Creates a function that invokes the method at object[key] with partials prepended to the arguments it receives",
            "{{_curry()}}": "Creates a function that accepts arguments of func and either invokes func returning its result, if at least arity number of arguments have been provided, or returns a function that accepts the remaining func arguments, and so on. The arity of func may be specified if func.length is not sufficient.",
            "{{_curryRight()}}": "This method is like \"_.curry\" except that arguments are applied to func in the manner of \"_.partialRight\" instead of \"_.partial\"",
            "{{_debounce()}}": "Creates a debounced function that delays invoking func until after wait milliseconds have elapsed since the last time the debounced function was invoked. The debounced function comes with a cancel method to cancel delayed func invocations and a flush method to immediately invoke them. Provide options to indicate whether func should be invoked on the leading and/or trailing edge of the wait timeout. The func is invoked with the last arguments provided to the debounced function. Subsequent calls to the debounced function return the result of the last func invocation",
            "{{_defer()}}": "Defers invoking the func until the current call stack has cleared. Any additional arguments are provided to func when it's invoked",
            "{{_delay()}}": "Invokes func after wait milliseconds. Any additional arguments are provided to func when it's invoked",
            "{{_flip()}}": "Creates a function that invokes func with arguments reversed",
            "{{_memoize()}}": "Creates a function that memoizes the result of func. If resolver is provided, it determines the cache key for storing the result based on the arguments provided to the memoized function. By default, the first argument provided to the memoized function is used as the map cache key. The func is invoked with the this binding of the memoized function",
            "{{_negate()}}": "Creates a function that negates the result of the predicate func. The func predicate is invoked with the this binding and arguments of the created function",
            "{{_once()}}": "Creates a function that is restricted to invoking func once. Repeat calls to the function return the value of the first invocation. The func is invoked with the this binding and arguments of the created function",
            "{{_overArgs()}}": "Creates a function that invokes func with its arguments transformed",
            "{{_partial()}}": "Creates a function that invokes func with partials prepended to the arguments it receives. This method is like \"_.bind\" except it does not alter the this binding",
            "{{_partialRight()}}": "This method is like \"_.partial\" except that partially applied arguments are appended to the arguments it receives",
            "{{_rearg()}}": "Creates a function that invokes func with arguments arranged according to the specified indexes where the argument value at the first index is provided as the first argument, the argument value at the second index is provided as the second argument, and so on",
            "{{_rest()}}": "Creates a function that invokes func with the this binding of the created function and arguments from start and beyond provided as an array",
            "{{_spread()}}": "Creates a function that invokes func with the this binding of the create function and an array of arguments much like \"Function#apply\"",
            "{{_throttle()}}": "Creates a throttled function that only invokes func at most once per every wait milliseconds. The throttled function comes with a cancel method to cancel delayed func invocations and a flush method to immediately invoke them. Provide options to indicate whether func should be invoked on the leading and/or trailing edge of the wait timeout. The func is invoked with the last arguments provided to the throttled function. Subsequent calls to the throttled function return the result of the last func invocation",
            "{{_unary()}}": "Creates a function that accepts up to one argument, ignoring any additional arguments",
            "{{_wrap()}}": "Creates a function that provides value to wrapper as its first argument. Any additional arguments provided to the function are appended to those provided to the wrapper. The wrapper is invoked with the this binding of the created function"
        }
    },

    "Lang": {
        "Lang Functions": {
            "{{_castArray()}}": "Casts value as an array if it's not one",
            "{{_clone()}}": "Creates a shallow clone of value",
            "{{_cloneDeep()}}": "This method is like \"_.clone\" except that it recursively clones value",
            "{{_cloneDeepWith()}}": "This method is like \"_.cloneWith\" except that it recursively clones value",
            "{{_cloneWith()}}": "This method is like \"_.clone\" except that it accepts customizer which is invoked to produce the cloned value. If customizer returns undefined, cloning is handled by the method instead",
            "{{_conformsTo()}}": "Checks if object conforms to source by invoking the predicate properties of source with the corresponding property values of object",
            "{{_eq()}}": "Performs a \"SameValueZero\" comparison between two values to determine if they are equivalent",
            "{{_gt()}}": "Checks if value is greater than other",
            "{{_gte()}}": "Checks if value is greater than or equal to other",
            "{{_isArguments()}}": "Checks if value is likely an arguments object",
            "{{_isArray()}}": "Checks if value is classified as an Array object",
            "{{_isArrayBuffer()}}": "Checks if value is classified as an ArrayBuffer object",
            "{{_isArrayLike()}}": "Checks if value is array-like. A value is considered array-like if it's not a function and has a value.length that's an integer greater than or equal to 0 and less than or equal to Number.MAX_SAFE_INTEGER",
            "{{_isArrayLikeObject()}}": "This method is like \"_.isArrayLike\" except that it also checks if value is an object",
            "{{_isBoolean()}}": "Checks if value is classified as a boolean primitive or object",
            "{{_isBuffer()}}": "Checks if value is a buffer",
            "{{_isDate()}}": "Checks if value is classified as a Date object",
            "{{_isElement()}}": "Checks if value is likely a DOM element",
            "{{_isEmpty()}}": "Checks if value is an empty object, collection, map, or set",
            "{{_isEqual()}}": "Performs a deep comparison between two values to determine if they are equivalent",
            "{{_isEqualWith()}}": "This method is like \"_.isEqual\" except that it accepts customizer which is invoked to compare values. If customizer returns undefined, comparisons are handled by the method instead",
            "{{_isError()}}": "Checks if value is an Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, or URIError object",
            "{{_isFinite()}}": "Checks if value is a finite primitive number",
            "{{_isFunction()}}": "Checks if value is classified as a Function object",
            "{{_isInteger()}}": "Checks if value is an integer",
            "{{_isLength()}}": "Checks if value is a valid array-like length",
            "{{_isMap()}}": "Checks if value is classified as a Map object",
            "{{_isMatch()}}": "Performs a partial deep comparison between object and source to determine if object contains equivalent property values",
            "{{_isMatchWith()}}": "This method is like \"_.isMatch\" except that it accepts customizer which is invoked to compare values. If customizer returns undefined, comparisons are handled by the method instead",
            "{{_isNaN()}}": "Checks if value is NaN",
            "{{_isNative()}}": "Checks if value is a pristine native function",
            "{{_isNil()}}": "Checks if value is null or undefined",
            "{{_isNull()}}": "Checks if value is null",
            "{{_isNumber()}}": "Checks if value is classified as a Number primitive or object",
            "{{_isObject()}}": "Checks if value is the \"language type\" of Object",
            "{{_isObjectLike()}}": "Checks if value is object-like. A value is object-like if it's not null and has a typeof result of \"object\".",
            "{{_isPlainObject()}}": "Checks if value is a plain object, that is, an object created by the Object constructor or one with a [[Prototype]] of null",
            "{{_isRegExp()}}": "Checks if value is classified as a RegExp object",
            "{{_isSafeInteger()}}": "Checks if value is a safe integer. An integer is safe if it's an IEEE-754 double precision number which isn't the result of a rounded unsafe integer",
            "{{_isSet()}}": "Checks if value is classified as a Set object",
            "{{_isString()}}": "Checks if value is classified as a String primitive or object",
            "{{_isSymbol()}}": "Checks if value is classified as a Symbol primitive or object",
            "{{_isTypedArray()}}": "Checks if value is classified as a typed array",
            "{{_isUndefined()}}": "Checks if value is undefined",
            "{{_isWeakMap()}}": "Checks if value is classified as a WeakMap object",
            "{{_isWeakSet()}}": "Checks if value is classified as a WeakSet object",
            "{{_lt()}}": "Checks if value is less than other",
            "{{_lte()}}": "Checks if value is less than or equal to other",
            "{{_toArray()}}": "Converts value to an array",
            "{{_toFinite()}}": "Converts value to a finite number",
            "{{_toInteger()}}": "Converts value to an integer",
            "{{_toLength()}}": "Converts value to an integer suitable for use as the length of an array-like object",
            "{{_toNumber()}}": "Converts value to a number",
            "{{_toPlainObject()}}": "Converts value to a plain object flattening inherited enumerable string keyed properties of value to own properties of the plain object",
            "{{_toSafeInteger()}}": "Converts value to a safe integer. A safe integer can be compared and represented correctly",
            "{{_toString()}}": "Converts value to a string. An empty string is returned for null and undefined values. The sign of -0 is preserved"
        }
    },

    "Math": {
        "Math Functions": {
            "{{_add()}}": "Adds two numbers",
            "{{_ceil()}}": "Computes number rounded up to precision",
            "{{_divide()}}": "Divide two numbers",
            "{{_floor()}}": "Computes number rounded down to precision",
            "{{_max()}}": "Computes the maximum value of array. If array is empty or falsey, undefined is returned",
            "{{_maxBy()}}": "This method is like \"_.max\" except that it accepts iteratee which is invoked for each element in array to generate the criterion by which the value is ranked.",
            "{{_mean()}}": "Computes the mean of the values in array",
            "{{_meanBy()}}": "This method is like \"_.mean\" except that it accepts iteratee which is invoked for each element in array to generate the value to be averaged",
            "{{_min()}}": "Computes the minimum value of array. If array is empty or falsey, undefined is returned.",
            "{{_minBy()}}": "This method is like \"_.min\" except that it accepts iteratee which is invoked for each element in array to generate the criterion by which the value is ranked",
            "{{_multiply()}}": "Multiply two numbers",
            "{{_round()}}": "Computes number rounded to precision",
            "{{_subtract()}}": "Subtract two numbers",
            "{{_sum()}}": "Computes the sum of the values in array",
            "{{_sumBy()}}": "This method is like \"_.sum\" except that it accepts iteratee which is invoked for each element in array to generate the value to be summed"
        }
    },

    "Number": {
        "Number Functions": {
            "{{_clamp()}}": "Clamps number within the inclusive lower and upper bounds",
            "{{_inRange()}}": "Checks if n is between start and up to, but not including, end. If end is not specified, it's set to start with start then set to 0. If start is greater than end the params are swapped to support negative ranges",
            "{{_random()}}": "Produces a random number between the inclusive lower and upper bounds. If only one argument is provided a number between 0 and the given number is returned. If floating is true, or either lower or upper are floats, a floating-point number is returned instead of an integer."
        }
    },

    "String": {
        "String Functions": {
            "{{_camelCase()}}": "Converts string to \"camel case\"",
            "{{_capitalize()}}": "Converts the first character of string to upper case and the remaining to \"lower case\"",
            "{{_deburr()}}": "Deburrs string by \"converting Latin-1\" Supplement and \"Latin Extended-A\" letters to basic Latin letters and removing \"combining diacritical marks\"",
            "{{_endsWith()}}": "Checks if string ends with the given target string",
            "{{_escape()}}": "Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in string to their corresponding HTML entities",
            "{{_escapeRegExp()}}": "Escapes the RegExp special characters \"^\", \"$\", \"\", \".\", \"*\", \"+\", \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in string",
            "{{_kebabCase()}}": "Converts string to \"kebab case\"",
            "{{_lowerCase()}}": "Converts string, as space separated words, to lower case",
            "{{_lowerFirst()}}": "Converts the first character of string to lower case",
            "{{_pad()}}": "Pads string on the left and right sides if it's shorter than length. Padding characters are truncated if they can't be evenly divided by length",
            "{{_padEnd()}}": "Pads string on the right side if it's shorter than length. Padding characters are truncated if they exceed length",
            "{{_padStart()}}": "Pads string on the left side if it's shorter than length. Padding characters are truncated if they exceed length",
            "{{_parseInt()}}": "Converts string to an integer of the specified radix. If radix is undefined or 0, a radix of 10 is used unless value is a hexadecimal, in which case a radix of 16 is used",
            "{{_repeat()}}": "Repeats the given string n times",
            "{{_replace()}}": "Replaces matches for pattern in string with replacement",
            "{{_snakeCase()}}": "Converts string to \"snake case\"",
            "{{_split()}}": "Splits string by separator",
            "{{_startCase()}}": "Converts string to \"start case\"",
            "{{_startsWith()}}": "Checks if string starts with the given target string",
            "{{_template()}}": "Creates a compiled template function that can interpolate data properties in \"interpolate\" delimiters, HTML-escape interpolated data properties in \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data properties may be accessed as free variables in the template. If a setting object is given, it takes precedence over \"_.templateSettings\" values",
            "{{_toLower()}}": "Converts string, as a whole, to lower case just like \"String#toLowerCase\"",
            "{{_toUpper()}}": "Converts string, as a whole, to upper case just like \"String#toUpperCase\"",
            "{{_trim()}}": "Removes leading and trailing whitespace or specified characters from string",
            "{{_trimEnd()}}": "Removes trailing whitespace or specified characters from string",
            "{{_trimStart()}}": "Removes leading whitespace or specified characters from string",
            "{{_truncate()}}": "Truncates string if it's longer than the given maximum string length. The last characters of the truncated string are replaced with the omission string which defaults to \"...\"",
            "{{_unescape()}}": "The inverse of \"_.escape\" this method converts the HTML entities &amp;, &lt;, &gt;, &quot;, and &#39; in string to their corresponding characters",
            "{{_upperCase()}}": "Converts string, as space separated words, to upper case",
            "{{_upperFirst()}}": "Converts the first character of string to upper case",
            "{{_words()}}": "Splits string into an array of its words"
        }
    },

    "Object": {
        "Object Functions": {
            "{{_assign()}}": "Assigns own enumerable string keyed properties of source objects to the destination object. Source objects are applied from left to right. Subsequent sources overwrite property assignments of previous sources",
            "{{_assignIn()}}": "This method is like \"_.assign\" except that it iterates over own and inherited source properties",
            "{{_assignInWith()}}": "This method is like \"_.assignIn\" except that it accepts customizer which is invoked to produce the assigned values. If customizer returns undefined, assignment is handled by the method instead",
            "{{_assignWith()}}": "This method is like \"_.assign\" except that it accepts customizer which is invoked to produce the assigned values. If customizer returns undefined, assignment is handled by the method instead",
            "{{_at()}}": "Creates an array of values corresponding to paths of object",
            "{{_create()}}": "Creates an object that inherits from the prototype object. If a properties object is given, its own enumerable string keyed properties are assigned to the created object",
            "{{_defaults()}}": "Assigns own and inherited enumerable string keyed properties of source objects to the destination object for all destination properties that resolve to undefined. Source objects are applied from left to right. Once a property is set, additional values of the same property are ignored",
            "{{_defaultsDeep()}}": "This method is like \"_.defaults\" except that it recursively assigns default properties",
            "{{_findKey()}}": "This method is like \"_.find\" except that it returns the key of the first element predicate returns truthy for instead of the element itself",
            "{{_findLastKey()}}": "This method is like \"_.findKey\" except that it iterates over elements of a collection in the opposite order",
            "{{_forIn()}}": "Iterates over own and inherited enumerable string keyed properties of an object and invokes iteratee for each property",
            "{{_forInRight()}}": "This method is like \"_.forIn\" except that it iterates over properties of object in the opposite order",
            "{{_forOwn()}}": "Iterates over own enumerable string keyed properties of an object and invokes iteratee for each property",
            "{{_forOwnRight()}}": "This method is like \"_.forOwn\" except that it iterates over properties of object in the opposite order",
            "{{_functions()}}": "Creates an array of function property names from own enumerable properties of object",
            "{{_functionsIn()}}": "Creates an array of function property names from own and inherited enumerable properties of object",
            "{{_get()}}": "Gets the value at path of object. If the resolved value is undefined, the defaultValue is returned in its place",
            "{{_has()}}": "Checks if path is a direct property of object",
            "{{_hasIn()}}": "Checks if path is a direct or inherited property of object",
            "{{_invert()}}": "Creates an object composed of the inverted keys and values of object. If object contains duplicate values, subsequent values overwrite property assignments of previous values",
            "{{_invertBy()}}": "This method is like \"_.invert\" except that the inverted object is generated from the results of running each element of object thru iteratee. The corresponding inverted value of each inverted key is an array of keys responsible for generating the inverted value",
            "{{_invoke()}}": "Invokes the method at path of object",
            "{{_keys()}}": "Creates an array of the own enumerable property names of object",
            "{{_keysIn()}}": "Creates an array of the own and inherited enumerable property names of object",
            "{{_mapKeys()}}": "The opposite of \"_.mapValues\" this method creates an object with the same values as object and keys generated by running each own enumerable string keyed property of object thru iteratee",
            "{{_mapValues()}}": "Creates an object with the same keys as object and values generated by running each own enumerable string keyed property of object thru iteratee",
            "{{_merge()}}": "This method is like \"_.assign\" except that it recursively merges own and inherited enumerable string keyed properties of source objects into the destination object. Source properties that resolve to undefined are skipped if a destination value exists. Array and plain object properties are merged recursively. Other objects and value types are overridden by assignment. Source objects are applied from left to right. Subsequent sources overwrite property assignments of previous sources",
            "{{_mergeWith()}}": "This method is like \"_.merge\" except that it accepts customizer which is invoked to produce the merged values of the destination and source properties. If customizer returns undefined, merging is handled by the method instead",
            "{{_omit()}}": "The opposite of \"_.pick\" this method creates an object composed of the own and inherited enumerable property paths of object that are not omitted",
            "{{_omitBy()}}": "The opposite of \"_.pickBy\" this method creates an object composed of the own and inherited enumerable string keyed properties of object that predicate doesn't return truthy for",
            "{{_pick()}}": "Creates an object composed of the picked object properties",
            "{{_pickBy()}}": "reates an object composed of the object properties predicate returns truthy for",
            "{{_result()}}": "This method is like \"_.get\" except that if the resolved value is a function it's invoked with the this binding of its parent object and its result is returned",
            "{{_set()}}": "Sets the value at path of object. If a portion of path doesn't exist, it's created. Arrays are created for missing index properties while objects are created for all other missing properties. Use \"_.setWith\" to customize path creation",
            "{{_setWith()}}": "This method is like _.set except that it accepts customizer which is invoked to produce the objects of path. If customizer returns undefined path creation is handled by the method instead",
            "{{_toPairs()}}": "Creates an array of own enumerable string keyed-value pairs for object which can be consumed by \"_.fromPairs\". If object is a map or set, its entries are returned",
            "{{_toPairsIn()}}": "Creates an array of own and inherited enumerable string keyed-value pairs for object which can be consumed by \"_.fromPairs\". If object is a map or set, its entries are returned",
            "{{_transform()}}": "An alternative to \"_.reduce\" this method transforms object to a new accumulator object which is the result of running each of its own enumerable string keyed properties thru iteratee, with each invocation potentially mutating the accumulator object. If accumulator is not provided, a new object with the same [[Prototype]] will be used",
            "{{_unset()}}": "Removes the property at path of object",
            "{{_update()}}": "This method is like \"_.set\" except that accepts updater to produce the value to set. Use \"_.updateWith\" to customize path creation",
            "{{_updateWith()}}": "This method is like \"_.update\" except that it accepts customizer which is invoked to produce the objects of path. If customizer returns undefined path creation is handled by the method instead",
            "{{_values()}}": "Creates an array of the own enumerable string keyed property values of object",
            "{{_valuesIn()}}": "Creates an array of the own and inherited enumerable string keyed property values of object"
        }
    },

    "Util": {
        "Utility Functions": {
            "{{_attempt()}}": "Attempts to invoke func, returning either the result or the caught error object. Any additional arguments are provided to func when it's invoked",
            "{{_bindAll()}}": "Binds methods of an object to the object itself, overwriting the existing method",
            "{{_cond()}}": "Creates a function that iterates over pairs and invokes the corresponding function of the first predicate to return truthy. The predicate-function pairs are invoked with the this binding and arguments of the created function",
            "{{_conforms()}}": "Creates a function that invokes the predicate properties of source with the corresponding property values of a given object, returning true if all predicates return truthy, else false",
            "{{_constant()}}": "Creates a function that returns value",
            "{{_defaultTo()}}": "Checks value to determine whether a default value should be returned in its place. The defaultValue is returned if value is NaN, null, or undefined",
            "{{_flow()}}": "Creates a function that returns the result of invoking the given functions with the this binding of the created function, where each successive invocation is supplied the return value of the previous",
            "{{_flowRight()}}": "This method is like \"_.flow\" except that it creates a function that invokes the given functions from right to left.",
            "{{_identity()}}": "This method returns the first argument it receives",
            "{{_iteratee()}}": "Creates a function that invokes func with the arguments of the created function. If func is a property name, the created function returns the property value for a given element. If func is an array or object, the created function returns true for elements that contain the equivalent source properties, otherwise it returns false",
            "{{_matches()}}": "Creates a function that performs a partial deep comparison between a given object and source, returning true if the given object has equivalent property values, else false",
            "{{_matchesProperty()}}": "Creates a function that performs a partial deep comparison between the value at path of a given object to srcValue, returning true if the object value is equivalent, else false",
            "{{_method()}}": "Creates a function that invokes the method at path of a given object. Any additional arguments are provided to the invoked method",
            "{{_methodOf()}}": "The opposite of \"_.method\" this method creates a function that invokes the method at a given path of object. Any additional arguments are provided to the invoked method",
            "{{_mixin()}}": "Adds all own enumerable string keyed function properties of a source object to the destination object. If object is a function, then methods are added to its prototype as well",
            "{{_noConflict()}}": "Reverts the _ variable to its previous value and returns a reference to the lodash function",
            "{{_noop()}}": "This method returns undefined",
            "{{_nthArg()}}": "Creates a function that gets the argument at index n. If n is negative, the nth argument from the end is returned",
            "{{_over()}}": "Creates a function that invokes iteratees with the arguments it receives and returns their results",
            "{{_overEvery()}}": "Creates a function that checks if all of the predicates return truthy when invoked with the arguments it receives",
            "{{_overSome()}}": "Creates a function that checks if any of the predicates return truthy when invoked with the arguments it receives",
            "{{_property()}}": "Creates a function that returns the value at path of a given object",
            "{{_propertyOf()}}": "The opposite of \"_.property\" this method creates a function that returns the value at a given path of object",
            "{{_range()}}": "Creates an array of numbers (positive and/or negative) progressing from start up to, but not including, end. A step of -1 is used if a negative start is specified without an end or step. If end is not specified, it's set to start with start then set to 0",
            "{{_rangeRight()}}": "This method is like \"_.range\" except that it populates values in descending order",
            "{{_runInContext()}}": "Create a new pristine lodash function using the context object",
            "{{_stubArray()}}": "This method returns a new empty array",
            "{{_stubFalse()}}": "This method returns false",
            "{{_stubObject()}}": "This method returns a new empty object",
            "{{_stubString()}}": "This method returns an empty string",
            "{{_stubTrue()}}": "This method returns true",
            "{{_times()}}": "Invokes the iteratee n times, returning an array of the results of each invocation",
            "{{_toPath()}}": "Converts value to a property path array",
            "{{_uniqueId()}}": "Generates a unique ID. If prefix is given, the ID is appended to it"
        }
    },

    "__PAGE__": "UPL Core",
    "Core": {
        "Basic": {
            "constructor": "Gets naming of core names",
            "version": "Get the core version",
            "tmpInput": "An input element to check if a particular attribute is supported",
            "tmpNode": "A div element to check if it supports a particular CSS style",
            "noConflict()": "Change the core naming identifier",
            "define()": "This is a function that creates an extended namespace corresponding to the core sub name"
        }
    },

    "Core Expansion": {
        "Debug": {
            "log()": "Enable simple debugging in environments that do not support console debugging"
        },
        "Async Import": {
            "loadcss()": "Dynamically load CSS files",
            "loadjs()": "Dynamically load JS files",
            "load()": "CSS, JS files dynamically loaded.",
            "addAliases()": "Load using some alias naming"
        },
        "Bind jQuery": {
            "bindjQuery()": "Binding a class to jQuery makes it a jQuery plugin"
        },
        "Class": {
            "Class()": "Use core extension related to class pattern"
        },
        "Dependency": {
            "dependency()": "Add and use dependency module patterns"
        },
        "Namespace": {
            "namespace()": "A namespace space is created, a set of objects is created, and a sub-namespace is created with the delimiter \".\""
        },
        "RGB to Hex": {
            "rgb2hex()": "Converts RGB values to Hex values"
        },
        "DelayRun": {
            "delayRun()": "It will be ignored if a call is made within a given time, and will only execute the function if it is exceeded"
        },
        "Template": {
            "template()": "After creating the template, convert from string"
        },
        "browser": {
            "isTouch": "Check if it is a touch device",
            "isRetina": "Check whether Retina display device",
            "isMobile": "Identify mobile devices",
            "isMac": "Mac OS operating system check",
            "isLinux": "Linux OS operating system check",
            "isWin": "Windows OS operating system check",
            "is64Bit": "64-bit platform check",
            "isIE": "IE browser check",
            "ieVersion": "IE browser version check",
            "isOpera": "Opera browser check",
            "isChrome": "Chrome browser check",
            "isSafari": "Safari browser check",
            "isWebKit": "Webkit browser engine check",
            "isGecko": "Gecko browser engine check",
            "isIETri4": "Trident browser engine check",
            "isAir": "Adobe Air check",
            "isIOS": "IPhone, iPad device check",
            "isAndroid": "Android device check",
            "iosVersion": "IOS version check",
            "androidVersion": "Android version check"
        },
        "CSS3": {
            "prefix()": "Prefix the given css name with the vendor prefix for the current browser",
            "support": "Check if css3 is supported.",
            "support3D": "Check for 3D support in CSS3",
            "has()": "Checks if the given CSS attribute is supported",
            "transform": "Returns the vendor prefix for the transform attribute in CSS3",
            "transitionTimingFunction": "Returns the vendor prefix for the transitionTimingFunction property in CSS3",
            "transitionDuration": "Returns the vendor prefix for the transitionDuration attribute in CSS3",
            "transitionDelay": "Returns the vendor prefix of the transitionDelay property of CSS3",
            "transformOrigin": "Returns the vendor prefix for the transformOrigin attribute in CSS3",
            "transition": "Returns the vendor prefix for the transition attribute in CSS3",
            "translateZ": "Returns the vendor prefix for the translateZ property of CSS3",
            "transitionEnd": "Returns the vendor prefix for the transitionEnd attribute in CSS3",
            "position()": "Returns the current position of an element element",
            "move()": "Use CSS3 properties to move",
            "animate()": "Animate animations using CSS3 properties",
            "transitionStyle()": "Adds the transitionStyle property of the css3 attribute to the specified element"
        }
    },

    "jQuery Expansion": {
        "Plugin": {
            "cssPseudo()": "CSS virtual selector controls the \":after\", \":before\" selector",
            "maxlengthNumber()": "Use the maxlength attribute feature on input window elements of type number"
        },
        "Utility": {
            "{{$version}}": "Check the version of jQuery",
            "{{$$()}}": "Do not rediscover the element that was searched once when searching for elements",
            "{{$log()}}": "Shows the console history, such as \"console.log\""
        },
        "Filter": {
            "focusable": "Select elements with focus attributes",
            "displays": "Select elements by display attribute value"
        },
        "Custom Event": {
            "resizeend": "Event handler that occurs at the end of browser resize",
            "scrollend": "The event handler that occurs at the end of the scroll time",
            "infinitescroll": "Event handler that is raised when the scroll reaches the bottom",
            "mouseleftclick": "Mouse left click event handler",
            "mouserightclick": "Mouse right click event handler",
            "mousewheelclick": "Mouse wheel click event handler",
            "mousewheelup": "Mouse wheel top event handler",
            "mousewheeldown": "Mouse wheel bottom event handler"
        }
    },

    "Polyfill": {
        "Polyfill": {
            "<picture>": "Supports the HTML5 picture element poly fill function",
            "<template>": "Supports HTML5 template element poly fill",
            "matchMedia()": "Supports media query polyphonic function"
        }
    },

    "Module": {
        "Component": {
            "MobilePreview": "Provides preview screen function that can preview the screen of the linked page from the list map page",
            "MobileDeviceInfo": "Provides the ability to control the device at the front desk by judging the device agent information of the mobile environment",
            "Accordion": "It makes it easy to implement an accordion type list",
            "VisualRolling": "Easily create banners that require rolling slides",
            "TabMenu": "It makes tab menu type list easy to implement",
            "HamMenu": "It is possible to open and close the whole mobile menu, and to expose the contents of the menu",
            "Modal": "Making modal layer popups easier",
            "Selectbox": "IE8 or later This is a select box applicable to modern browsers",
            "Toast": "Make toast popups easier",
            "Checkboxes": "Full selection of multiple checkboxes is easy to use",
            "Scrolling": "Customized scrollbars are available",
            "AccordionCover": "Easily implement an accordion type horizontal type list",
            "AccordionSwipe": "Enables the accordion type vertical swipe function",
            "ProgressScrollIndicator": "Displays the progress bar on the screen when scrolling to determine the scroll position"
        }
    }
}
